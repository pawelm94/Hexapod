
projekcikhex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08002cb0  08002cb0  00012cb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08002e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  7 .bss          000001f0  200001dc  200001dc  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003cc  200003cc  000201dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012bb4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002433  00000000  00000000  00032dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006224  00000000  00000000  000351f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000878  00000000  00000000  0003b418  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000be8  00000000  00000000  0003bc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004e60  00000000  00000000  0003c878  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000038ae  00000000  00000000  000416d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00044f86  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001d8c  00000000  00000000  00045004  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c98 	.word	0x08002c98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08002c98 	.word	0x08002c98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000270:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <HAL_InitTick+0x24>)
{
 8000274:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000280:	f000 f892 	bl	80003a8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000284:	2200      	movs	r2, #0
 8000286:	4621      	mov	r1, r4
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f84c 	bl	8000328 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000290:	2000      	movs	r0, #0
 8000292:	bd10      	pop	{r4, pc}
 8000294:	20000008 	.word	0x20000008

08000298 <HAL_Init>:
{
 8000298:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <HAL_Init+0x30>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002a2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80002b2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b4:	2003      	movs	r0, #3
 80002b6:	f000 f825 	bl	8000304 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f7ff ffd8 	bl	8000270 <HAL_InitTick>
  HAL_MspInit();
 80002c0:	f001 fe50 	bl	8001f64 <HAL_MspInit>
}
 80002c4:	2000      	movs	r0, #0
 80002c6:	bd08      	pop	{r3, pc}
 80002c8:	40023c00 	.word	0x40023c00

080002cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002cc:	4a02      	ldr	r2, [pc, #8]	; (80002d8 <HAL_IncTick+0xc>)
 80002ce:	6813      	ldr	r3, [r2, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000220 	.word	0x20000220

080002dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002dc:	4b01      	ldr	r3, [pc, #4]	; (80002e4 <HAL_GetTick+0x8>)
 80002de:	6818      	ldr	r0, [r3, #0]
}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	20000220 	.word	0x20000220

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002e8:	b513      	push	{r0, r1, r4, lr}
 80002ea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 80002ec:	f7ff fff6 	bl	80002dc <HAL_GetTick>
 80002f0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80002f2:	f7ff fff3 	bl	80002dc <HAL_GetTick>
 80002f6:	9b01      	ldr	r3, [sp, #4]
 80002f8:	1b00      	subs	r0, r0, r4
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d3f9      	bcc.n	80002f2 <HAL_Delay+0xa>
  {
  }
}
 80002fe:	b002      	add	sp, #8
 8000300:	bd10      	pop	{r4, pc}
	...

08000304 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000304:	4a07      	ldr	r2, [pc, #28]	; (8000324 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000306:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000308:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800030c:	041b      	lsls	r3, r3, #16
 800030e:	0c1b      	lsrs	r3, r3, #16
 8000310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000314:	0200      	lsls	r0, r0, #8
 8000316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800031a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800031e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000320:	60d3      	str	r3, [r2, #12]
 8000322:	4770      	bx	lr
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800032a:	b530      	push	{r4, r5, lr}
 800032c:	68dc      	ldr	r4, [r3, #12]
 800032e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000332:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000336:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000338:	2b04      	cmp	r3, #4
 800033a:	bf28      	it	cs
 800033c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 0501 	mov.w	r5, #1
 8000344:	fa05 f303 	lsl.w	r3, r5, r3
 8000348:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800034c:	bf8c      	ite	hi
 800034e:	3c03      	subhi	r4, #3
 8000350:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000352:	4019      	ands	r1, r3
 8000354:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000356:	fa05 f404 	lsl.w	r4, r5, r4
 800035a:	3c01      	subs	r4, #1
 800035c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800035e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000360:	ea42 0201 	orr.w	r2, r2, r1
 8000364:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	bfaf      	iteee	ge
 800036a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036e:	f000 000f 	andlt.w	r0, r0, #15
 8000372:	4b06      	ldrlt	r3, [pc, #24]	; (800038c <HAL_NVIC_SetPriority+0x64>)
 8000374:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000376:	bfa5      	ittet	ge
 8000378:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800037c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000380:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000384:	bd30      	pop	{r4, r5, pc}
 8000386:	bf00      	nop
 8000388:	e000ed00 	.word	0xe000ed00
 800038c:	e000ed14 	.word	0xe000ed14

08000390 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000390:	0942      	lsrs	r2, r0, #5
 8000392:	2301      	movs	r3, #1
 8000394:	f000 001f 	and.w	r0, r0, #31
 8000398:	fa03 f000 	lsl.w	r0, r3, r0
 800039c:	4b01      	ldr	r3, [pc, #4]	; (80003a4 <HAL_NVIC_EnableIRQ+0x14>)
 800039e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003a2:	4770      	bx	lr
 80003a4:	e000e100 	.word	0xe000e100

080003a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	3801      	subs	r0, #1
 80003aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003ae:	d20a      	bcs.n	80003c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b6:	21f0      	movs	r1, #240	; 0xf0
 80003b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	e000e010 	.word	0xe000e010
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003d6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003d8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003da:	bf0c      	ite	eq
 80003dc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003e0:	f022 0204 	bicne.w	r2, r2, #4
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	4770      	bx	lr
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80003ec:	4770      	bx	lr

080003ee <HAL_SYSTICK_IRQHandler>:
{
 80003ee:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80003f0:	f7ff fffc 	bl	80003ec <HAL_SYSTICK_Callback>
 80003f4:	bd08      	pop	{r3, pc}

080003f6 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80003f6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d003      	beq.n	8000406 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003fe:	2380      	movs	r3, #128	; 0x80
 8000400:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000402:	2001      	movs	r0, #1
 8000404:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000406:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000408:	2305      	movs	r3, #5
 800040a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800040e:	6813      	ldr	r3, [r2, #0]
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000416:	2000      	movs	r0, #0
}
 8000418:	4770      	bx	lr
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000420:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000422:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000424:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80005d4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000428:	4a68      	ldr	r2, [pc, #416]	; (80005cc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80005d8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800042e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000430:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01U) << position;
 8000432:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000436:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01U) << position;
 8000438:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000440:	45b6      	cmp	lr, r6
 8000442:	f040 80ae 	bne.w	80005a2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000446:	684c      	ldr	r4, [r1, #4]
 8000448:	f024 0710 	bic.w	r7, r4, #16
 800044c:	2f02      	cmp	r7, #2
 800044e:	d116      	bne.n	800047e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000450:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000454:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000458:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800045c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000460:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000464:	f04f 0c0f 	mov.w	ip, #15
 8000468:	fa0c fc0b 	lsl.w	ip, ip, fp
 800046c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000470:	690d      	ldr	r5, [r1, #16]
 8000472:	fa05 f50b 	lsl.w	r5, r5, fp
 8000476:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800047a:	f8ca 5020 	str.w	r5, [sl, #32]
 800047e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000482:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000484:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000488:	fa05 f50a 	lsl.w	r5, r5, sl
 800048c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800048e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000492:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000496:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800049a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800049c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004a0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80004a2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004a6:	d811      	bhi.n	80004cc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80004a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004aa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004ae:	68cf      	ldr	r7, [r1, #12]
 80004b0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80004b4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80004b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80004ba:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004bc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004c0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80004c4:	409f      	lsls	r7, r3
 80004c6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80004ca:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80004cc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004ce:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004d0:	688f      	ldr	r7, [r1, #8]
 80004d2:	fa07 f70a 	lsl.w	r7, r7, sl
 80004d6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80004d8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004da:	00e5      	lsls	r5, r4, #3
 80004dc:	d561      	bpl.n	80005a2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004de:	f04f 0b00 	mov.w	fp, #0
 80004e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80004e6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ea:	4d39      	ldr	r5, [pc, #228]	; (80005d0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ec:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80004f0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80004f4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80004f8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80004fc:	9703      	str	r7, [sp, #12]
 80004fe:	9f03      	ldr	r7, [sp, #12]
 8000500:	f023 0703 	bic.w	r7, r3, #3
 8000504:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000508:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800050c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000510:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000514:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000518:	f04f 0e0f 	mov.w	lr, #15
 800051c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000520:	42a8      	cmp	r0, r5
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000522:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000526:	d043      	beq.n	80005b0 <HAL_GPIO_Init+0x194>
 8000528:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800052c:	42a8      	cmp	r0, r5
 800052e:	d041      	beq.n	80005b4 <HAL_GPIO_Init+0x198>
 8000530:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000534:	42a8      	cmp	r0, r5
 8000536:	d03f      	beq.n	80005b8 <HAL_GPIO_Init+0x19c>
 8000538:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800053c:	42a8      	cmp	r0, r5
 800053e:	d03d      	beq.n	80005bc <HAL_GPIO_Init+0x1a0>
 8000540:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000544:	42a8      	cmp	r0, r5
 8000546:	d03b      	beq.n	80005c0 <HAL_GPIO_Init+0x1a4>
 8000548:	4548      	cmp	r0, r9
 800054a:	d03b      	beq.n	80005c4 <HAL_GPIO_Init+0x1a8>
 800054c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000550:	42a8      	cmp	r0, r5
 8000552:	d039      	beq.n	80005c8 <HAL_GPIO_Init+0x1ac>
 8000554:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000558:	42a8      	cmp	r0, r5
 800055a:	bf14      	ite	ne
 800055c:	2508      	movne	r5, #8
 800055e:	2507      	moveq	r5, #7
 8000560:	fa05 f50c 	lsl.w	r5, r5, ip
 8000564:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000568:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800056a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800056c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800056e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000572:	bf0c      	ite	eq
 8000574:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000576:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000578:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800057a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800057c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000580:	bf0c      	ite	eq
 8000582:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000584:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000586:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000588:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800058a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800058e:	bf0c      	ite	eq
 8000590:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000592:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000594:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000596:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000598:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800059a:	bf54      	ite	pl
 800059c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800059e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80005a0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005a2:	3301      	adds	r3, #1
 80005a4:	2b10      	cmp	r3, #16
 80005a6:	f47f af44 	bne.w	8000432 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80005aa:	b005      	add	sp, #20
 80005ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005b0:	465d      	mov	r5, fp
 80005b2:	e7d5      	b.n	8000560 <HAL_GPIO_Init+0x144>
 80005b4:	2501      	movs	r5, #1
 80005b6:	e7d3      	b.n	8000560 <HAL_GPIO_Init+0x144>
 80005b8:	2502      	movs	r5, #2
 80005ba:	e7d1      	b.n	8000560 <HAL_GPIO_Init+0x144>
 80005bc:	2503      	movs	r5, #3
 80005be:	e7cf      	b.n	8000560 <HAL_GPIO_Init+0x144>
 80005c0:	2504      	movs	r5, #4
 80005c2:	e7cd      	b.n	8000560 <HAL_GPIO_Init+0x144>
 80005c4:	2505      	movs	r5, #5
 80005c6:	e7cb      	b.n	8000560 <HAL_GPIO_Init+0x144>
 80005c8:	2506      	movs	r5, #6
 80005ca:	e7c9      	b.n	8000560 <HAL_GPIO_Init+0x144>
 80005cc:	40013c00 	.word	0x40013c00
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40021400 	.word	0x40021400

080005dc <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005dc:	6803      	ldr	r3, [r0, #0]
{
 80005de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80005e0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005e2:	07d8      	lsls	r0, r3, #31
 80005e4:	d43b      	bmi.n	800065e <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	0799      	lsls	r1, r3, #30
 80005ea:	f100 8086 	bmi.w	80006fa <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005ee:	6823      	ldr	r3, [r4, #0]
 80005f0:	071e      	lsls	r6, r3, #28
 80005f2:	f100 80d1 	bmi.w	8000798 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005f6:	6823      	ldr	r3, [r4, #0]
 80005f8:	075d      	lsls	r5, r3, #29
 80005fa:	d52a      	bpl.n	8000652 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	4b8e      	ldr	r3, [pc, #568]	; (800083c <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000602:	4d8f      	ldr	r5, [pc, #572]	; (8000840 <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000606:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800060a:	641a      	str	r2, [r3, #64]	; 0x40
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000616:	682b      	ldr	r3, [r5, #0]
 8000618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061c:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800061e:	f7ff fe5d 	bl	80002dc <HAL_GetTick>
 8000622:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000624:	682b      	ldr	r3, [r5, #0]
 8000626:	05da      	lsls	r2, r3, #23
 8000628:	f140 80d8 	bpl.w	80007dc <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800062c:	68a3      	ldr	r3, [r4, #8]
 800062e:	4d83      	ldr	r5, [pc, #524]	; (800083c <HAL_RCC_OscConfig+0x260>)
 8000630:	2b01      	cmp	r3, #1
 8000632:	f040 80da 	bne.w	80007ea <HAL_RCC_OscConfig+0x20e>
 8000636:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800063e:	f7ff fe4d 	bl	80002dc <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000642:	4d7e      	ldr	r5, [pc, #504]	; (800083c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8000644:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000646:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800064a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800064c:	079b      	lsls	r3, r3, #30
 800064e:	f140 80ed 	bpl.w	800082c <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000652:	69a2      	ldr	r2, [r4, #24]
 8000654:	2a00      	cmp	r2, #0
 8000656:	f040 80f9 	bne.w	800084c <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800065a:	2000      	movs	r0, #0
 800065c:	e015      	b.n	800068a <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800065e:	4b77      	ldr	r3, [pc, #476]	; (800083c <HAL_RCC_OscConfig+0x260>)
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	f002 020c 	and.w	r2, r2, #12
 8000666:	2a04      	cmp	r2, #4
 8000668:	d007      	beq.n	800067a <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000670:	2a08      	cmp	r2, #8
 8000672:	d10c      	bne.n	800068e <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	025a      	lsls	r2, r3, #9
 8000678:	d509      	bpl.n	800068e <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800067a:	4b70      	ldr	r3, [pc, #448]	; (800083c <HAL_RCC_OscConfig+0x260>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	039b      	lsls	r3, r3, #14
 8000680:	d5b1      	bpl.n	80005e6 <HAL_RCC_OscConfig+0xa>
 8000682:	6863      	ldr	r3, [r4, #4]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1ae      	bne.n	80005e6 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000688:	2001      	movs	r0, #1
}
 800068a:	b003      	add	sp, #12
 800068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800068e:	6863      	ldr	r3, [r4, #4]
 8000690:	4d6a      	ldr	r5, [pc, #424]	; (800083c <HAL_RCC_OscConfig+0x260>)
 8000692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000696:	d111      	bne.n	80006bc <HAL_RCC_OscConfig+0xe0>
 8000698:	682b      	ldr	r3, [r5, #0]
 800069a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80006a0:	f7ff fe1c 	bl	80002dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006a4:	4d65      	ldr	r5, [pc, #404]	; (800083c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80006a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006a8:	682b      	ldr	r3, [r5, #0]
 80006aa:	039f      	lsls	r7, r3, #14
 80006ac:	d49b      	bmi.n	80005e6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ae:	f7ff fe15 	bl	80002dc <HAL_GetTick>
 80006b2:	1b80      	subs	r0, r0, r6
 80006b4:	2864      	cmp	r0, #100	; 0x64
 80006b6:	d9f7      	bls.n	80006a8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80006b8:	2003      	movs	r0, #3
 80006ba:	e7e6      	b.n	800068a <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006c0:	d104      	bne.n	80006cc <HAL_RCC_OscConfig+0xf0>
 80006c2:	682b      	ldr	r3, [r5, #0]
 80006c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c8:	602b      	str	r3, [r5, #0]
 80006ca:	e7e5      	b.n	8000698 <HAL_RCC_OscConfig+0xbc>
 80006cc:	682a      	ldr	r2, [r5, #0]
 80006ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006d2:	602a      	str	r2, [r5, #0]
 80006d4:	682a      	ldr	r2, [r5, #0]
 80006d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006da:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1df      	bne.n	80006a0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80006e0:	f7ff fdfc 	bl	80002dc <HAL_GetTick>
 80006e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006e6:	682b      	ldr	r3, [r5, #0]
 80006e8:	0398      	lsls	r0, r3, #14
 80006ea:	f57f af7c 	bpl.w	80005e6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ee:	f7ff fdf5 	bl	80002dc <HAL_GetTick>
 80006f2:	1b80      	subs	r0, r0, r6
 80006f4:	2864      	cmp	r0, #100	; 0x64
 80006f6:	d9f6      	bls.n	80006e6 <HAL_RCC_OscConfig+0x10a>
 80006f8:	e7de      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80006fa:	4b50      	ldr	r3, [pc, #320]	; (800083c <HAL_RCC_OscConfig+0x260>)
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	f012 0f0c 	tst.w	r2, #12
 8000702:	d007      	beq.n	8000714 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800070a:	2a08      	cmp	r2, #8
 800070c:	d116      	bne.n	800073c <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	0259      	lsls	r1, r3, #9
 8000712:	d413      	bmi.n	800073c <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000714:	4b49      	ldr	r3, [pc, #292]	; (800083c <HAL_RCC_OscConfig+0x260>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	0792      	lsls	r2, r2, #30
 800071a:	d502      	bpl.n	8000722 <HAL_RCC_OscConfig+0x146>
 800071c:	68e2      	ldr	r2, [r4, #12]
 800071e:	2a01      	cmp	r2, #1
 8000720:	d1b2      	bne.n	8000688 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000722:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000724:	22f8      	movs	r2, #248	; 0xf8
 8000726:	fa92 f2a2 	rbit	r2, r2
 800072a:	fab2 f182 	clz	r1, r2
 800072e:	6922      	ldr	r2, [r4, #16]
 8000730:	408a      	lsls	r2, r1
 8000732:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000736:	430a      	orrs	r2, r1
 8000738:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800073a:	e758      	b.n	80005ee <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800073c:	68e2      	ldr	r2, [r4, #12]
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <HAL_RCC_OscConfig+0x268>)
 8000740:	b1da      	cbz	r2, 800077a <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000746:	f7ff fdc9 	bl	80002dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800074a:	4d3c      	ldr	r5, [pc, #240]	; (800083c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800074c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800074e:	682b      	ldr	r3, [r5, #0]
 8000750:	079b      	lsls	r3, r3, #30
 8000752:	d50c      	bpl.n	800076e <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000754:	6829      	ldr	r1, [r5, #0]
 8000756:	23f8      	movs	r3, #248	; 0xf8
 8000758:	fa93 f3a3 	rbit	r3, r3
 800075c:	fab3 f283 	clz	r2, r3
 8000760:	6923      	ldr	r3, [r4, #16]
 8000762:	4093      	lsls	r3, r2
 8000764:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000768:	4313      	orrs	r3, r2
 800076a:	602b      	str	r3, [r5, #0]
 800076c:	e73f      	b.n	80005ee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800076e:	f7ff fdb5 	bl	80002dc <HAL_GetTick>
 8000772:	1b80      	subs	r0, r0, r6
 8000774:	2802      	cmp	r0, #2
 8000776:	d9ea      	bls.n	800074e <HAL_RCC_OscConfig+0x172>
 8000778:	e79e      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 800077a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800077c:	f7ff fdae 	bl	80002dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000780:	4d2e      	ldr	r5, [pc, #184]	; (800083c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8000782:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000784:	682b      	ldr	r3, [r5, #0]
 8000786:	079f      	lsls	r7, r3, #30
 8000788:	f57f af31 	bpl.w	80005ee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800078c:	f7ff fda6 	bl	80002dc <HAL_GetTick>
 8000790:	1b80      	subs	r0, r0, r6
 8000792:	2802      	cmp	r0, #2
 8000794:	d9f6      	bls.n	8000784 <HAL_RCC_OscConfig+0x1a8>
 8000796:	e78f      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000798:	6962      	ldr	r2, [r4, #20]
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <HAL_RCC_OscConfig+0x26c>)
 800079c:	b17a      	cbz	r2, 80007be <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007a2:	f7ff fd9b 	bl	80002dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007a6:	4d25      	ldr	r5, [pc, #148]	; (800083c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80007a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80007ac:	0798      	lsls	r0, r3, #30
 80007ae:	f53f af22 	bmi.w	80005f6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b2:	f7ff fd93 	bl	80002dc <HAL_GetTick>
 80007b6:	1b80      	subs	r0, r0, r6
 80007b8:	2802      	cmp	r0, #2
 80007ba:	d9f6      	bls.n	80007aa <HAL_RCC_OscConfig+0x1ce>
 80007bc:	e77c      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80007be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007c0:	f7ff fd8c 	bl	80002dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007c4:	4d1d      	ldr	r5, [pc, #116]	; (800083c <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80007c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80007ca:	0799      	lsls	r1, r3, #30
 80007cc:	f57f af13 	bpl.w	80005f6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007d0:	f7ff fd84 	bl	80002dc <HAL_GetTick>
 80007d4:	1b80      	subs	r0, r0, r6
 80007d6:	2802      	cmp	r0, #2
 80007d8:	d9f6      	bls.n	80007c8 <HAL_RCC_OscConfig+0x1ec>
 80007da:	e76d      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80007dc:	f7ff fd7e 	bl	80002dc <HAL_GetTick>
 80007e0:	1b80      	subs	r0, r0, r6
 80007e2:	2802      	cmp	r0, #2
 80007e4:	f67f af1e 	bls.w	8000624 <HAL_RCC_OscConfig+0x48>
 80007e8:	e766      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ea:	2b05      	cmp	r3, #5
 80007ec:	d104      	bne.n	80007f8 <HAL_RCC_OscConfig+0x21c>
 80007ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	672b      	str	r3, [r5, #112]	; 0x70
 80007f6:	e71e      	b.n	8000636 <HAL_RCC_OscConfig+0x5a>
 80007f8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80007fa:	f022 0201 	bic.w	r2, r2, #1
 80007fe:	672a      	str	r2, [r5, #112]	; 0x70
 8000800:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000802:	f022 0204 	bic.w	r2, r2, #4
 8000806:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000808:	2b00      	cmp	r3, #0
 800080a:	f47f af18 	bne.w	800063e <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800080e:	f7ff fd65 	bl	80002dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000812:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000816:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000818:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800081a:	0798      	lsls	r0, r3, #30
 800081c:	f57f af19 	bpl.w	8000652 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000820:	f7ff fd5c 	bl	80002dc <HAL_GetTick>
 8000824:	1b80      	subs	r0, r0, r6
 8000826:	42b8      	cmp	r0, r7
 8000828:	d9f6      	bls.n	8000818 <HAL_RCC_OscConfig+0x23c>
 800082a:	e745      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800082c:	f7ff fd56 	bl	80002dc <HAL_GetTick>
 8000830:	1b80      	subs	r0, r0, r6
 8000832:	42b8      	cmp	r0, r7
 8000834:	f67f af09 	bls.w	800064a <HAL_RCC_OscConfig+0x6e>
 8000838:	e73e      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000
 8000844:	42470000 	.word	0x42470000
 8000848:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800084c:	4d2b      	ldr	r5, [pc, #172]	; (80008fc <HAL_RCC_OscConfig+0x320>)
 800084e:	68ab      	ldr	r3, [r5, #8]
 8000850:	f003 030c 	and.w	r3, r3, #12
 8000854:	2b08      	cmp	r3, #8
 8000856:	f43f af17 	beq.w	8000688 <HAL_RCC_OscConfig+0xac>
 800085a:	4e29      	ldr	r6, [pc, #164]	; (8000900 <HAL_RCC_OscConfig+0x324>)
 800085c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800085e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000860:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000862:	d13e      	bne.n	80008e2 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000864:	f7ff fd3a 	bl	80002dc <HAL_GetTick>
 8000868:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800086a:	682b      	ldr	r3, [r5, #0]
 800086c:	0199      	lsls	r1, r3, #6
 800086e:	d432      	bmi.n	80008d6 <HAL_RCC_OscConfig+0x2fa>
 8000870:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000874:	fa97 f7a7 	rbit	r7, r7
 8000878:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800087c:	fab7 f787 	clz	r7, r7
 8000880:	fa92 f2a2 	rbit	r2, r2
 8000884:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000888:	fab2 f082 	clz	r0, r2
 800088c:	fa91 f1a1 	rbit	r1, r1
 8000890:	6a22      	ldr	r2, [r4, #32]
 8000892:	69e3      	ldr	r3, [r4, #28]
 8000894:	4313      	orrs	r3, r2
 8000896:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000898:	fa02 f707 	lsl.w	r7, r2, r7
 800089c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800089e:	0852      	lsrs	r2, r2, #1
 80008a0:	3a01      	subs	r2, #1
 80008a2:	4082      	lsls	r2, r0
 80008a4:	433b      	orrs	r3, r7
 80008a6:	4313      	orrs	r3, r2
 80008a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008aa:	4c14      	ldr	r4, [pc, #80]	; (80008fc <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80008ac:	fab1 f181 	clz	r1, r1
 80008b0:	fa02 f101 	lsl.w	r1, r2, r1
 80008b4:	430b      	orrs	r3, r1
 80008b6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80008b8:	2301      	movs	r3, #1
 80008ba:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80008bc:	f7ff fd0e 	bl	80002dc <HAL_GetTick>
 80008c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008c2:	6823      	ldr	r3, [r4, #0]
 80008c4:	019a      	lsls	r2, r3, #6
 80008c6:	f53f aec8 	bmi.w	800065a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ca:	f7ff fd07 	bl	80002dc <HAL_GetTick>
 80008ce:	1b40      	subs	r0, r0, r5
 80008d0:	2802      	cmp	r0, #2
 80008d2:	d9f6      	bls.n	80008c2 <HAL_RCC_OscConfig+0x2e6>
 80008d4:	e6f0      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008d6:	f7ff fd01 	bl	80002dc <HAL_GetTick>
 80008da:	1bc0      	subs	r0, r0, r7
 80008dc:	2802      	cmp	r0, #2
 80008de:	d9c4      	bls.n	800086a <HAL_RCC_OscConfig+0x28e>
 80008e0:	e6ea      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 80008e2:	f7ff fcfb 	bl	80002dc <HAL_GetTick>
 80008e6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	019b      	lsls	r3, r3, #6
 80008ec:	f57f aeb5 	bpl.w	800065a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008f0:	f7ff fcf4 	bl	80002dc <HAL_GetTick>
 80008f4:	1b00      	subs	r0, r0, r4
 80008f6:	2802      	cmp	r0, #2
 80008f8:	d9f6      	bls.n	80008e8 <HAL_RCC_OscConfig+0x30c>
 80008fa:	e6dd      	b.n	80006b8 <HAL_RCC_OscConfig+0xdc>
 80008fc:	40023800 	.word	0x40023800
 8000900:	42470060 	.word	0x42470060

08000904 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000904:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_RCC_GetSysClockFreq+0x68>)
 8000906:	6893      	ldr	r3, [r2, #8]
 8000908:	f003 030c 	and.w	r3, r3, #12
 800090c:	2b04      	cmp	r3, #4
{
 800090e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000910:	d003      	beq.n	800091a <HAL_RCC_GetSysClockFreq+0x16>
 8000912:	2b08      	cmp	r3, #8
 8000914:	d003      	beq.n	800091e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000916:	4816      	ldr	r0, [pc, #88]	; (8000970 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000918:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800091a:	4816      	ldr	r0, [pc, #88]	; (8000974 <HAL_RCC_GetSysClockFreq+0x70>)
 800091c:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800091e:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000920:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000922:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000926:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800092a:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800092e:	6853      	ldr	r3, [r2, #4]
 8000930:	fa94 f0a4 	rbit	r0, r4
 8000934:	fab0 f080 	clz	r0, r0
 8000938:	ea03 0304 	and.w	r3, r3, r4
 800093c:	fa23 f300 	lsr.w	r3, r3, r0
 8000940:	bf14      	ite	ne
 8000942:	480c      	ldrne	r0, [pc, #48]	; (8000974 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000944:	480a      	ldreq	r0, [pc, #40]	; (8000970 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000946:	fbb0 f0f1 	udiv	r0, r0, r1
 800094a:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <HAL_RCC_GetSysClockFreq+0x68>)
 800094e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	fa92 f2a2 	rbit	r2, r2
 8000958:	fab2 f282 	clz	r2, r2
 800095c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000960:	40d3      	lsrs	r3, r2
 8000962:	3301      	adds	r3, #1
 8000964:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000966:	fbb0 f0f3 	udiv	r0, r0, r3
 800096a:	bd10      	pop	{r4, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	00f42400 	.word	0x00f42400
 8000974:	017d7840 	.word	0x017d7840

08000978 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000978:	4b56      	ldr	r3, [pc, #344]	; (8000ad4 <HAL_RCC_ClockConfig+0x15c>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	f002 020f 	and.w	r2, r2, #15
 8000980:	428a      	cmp	r2, r1
{
 8000982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000986:	4605      	mov	r5, r0
 8000988:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800098a:	d330      	bcc.n	80009ee <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800098c:	682a      	ldr	r2, [r5, #0]
 800098e:	0794      	lsls	r4, r2, #30
 8000990:	d437      	bmi.n	8000a02 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000992:	07d0      	lsls	r0, r2, #31
 8000994:	d43d      	bmi.n	8000a12 <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000996:	4b4f      	ldr	r3, [pc, #316]	; (8000ad4 <HAL_RCC_ClockConfig+0x15c>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	f002 020f 	and.w	r2, r2, #15
 800099e:	4296      	cmp	r6, r2
 80009a0:	f0c0 8088 	bcc.w	8000ab4 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009a4:	682a      	ldr	r2, [r5, #0]
 80009a6:	0751      	lsls	r1, r2, #29
 80009a8:	f100 808c 	bmi.w	8000ac4 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009ac:	0713      	lsls	r3, r2, #28
 80009ae:	d507      	bpl.n	80009c0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80009b0:	4a49      	ldr	r2, [pc, #292]	; (8000ad8 <HAL_RCC_ClockConfig+0x160>)
 80009b2:	6929      	ldr	r1, [r5, #16]
 80009b4:	6893      	ldr	r3, [r2, #8]
 80009b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80009ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009be:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80009c0:	f7ff ffa0 	bl	8000904 <HAL_RCC_GetSysClockFreq>
 80009c4:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <HAL_RCC_ClockConfig+0x160>)
 80009c6:	22f0      	movs	r2, #240	; 0xf0
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	fa92 f2a2 	rbit	r2, r2
 80009ce:	fab2 f282 	clz	r2, r2
 80009d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009d6:	40d3      	lsrs	r3, r2
 80009d8:	4a40      	ldr	r2, [pc, #256]	; (8000adc <HAL_RCC_ClockConfig+0x164>)
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	40d8      	lsrs	r0, r3
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <HAL_RCC_ClockConfig+0x168>)
 80009e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fc44 	bl	8000270 <HAL_InitTick>
  return HAL_OK;
 80009e8:	2000      	movs	r0, #0
}
 80009ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009ee:	b2ca      	uxtb	r2, r1
 80009f0:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 030f 	and.w	r3, r3, #15
 80009f8:	4299      	cmp	r1, r3
 80009fa:	d0c7      	beq.n	800098c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80009fc:	2001      	movs	r0, #1
 80009fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a02:	4935      	ldr	r1, [pc, #212]	; (8000ad8 <HAL_RCC_ClockConfig+0x160>)
 8000a04:	68a8      	ldr	r0, [r5, #8]
 8000a06:	688b      	ldr	r3, [r1, #8]
 8000a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a0c:	4303      	orrs	r3, r0
 8000a0e:	608b      	str	r3, [r1, #8]
 8000a10:	e7bf      	b.n	8000992 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a12:	686a      	ldr	r2, [r5, #4]
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <HAL_RCC_ClockConfig+0x160>)
 8000a16:	2a01      	cmp	r2, #1
 8000a18:	d11e      	bne.n	8000a58 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a20:	d0ec      	beq.n	80009fc <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a22:	4c2d      	ldr	r4, [pc, #180]	; (8000ad8 <HAL_RCC_ClockConfig+0x160>)
 8000a24:	68a3      	ldr	r3, [r4, #8]
 8000a26:	f023 0303 	bic.w	r3, r3, #3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000a2e:	f7ff fc55 	bl	80002dc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a32:	686b      	ldr	r3, [r5, #4]
 8000a34:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000a36:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a38:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a3c:	d116      	bne.n	8000a6c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a3e:	68a3      	ldr	r3, [r4, #8]
 8000a40:	f003 030c 	and.w	r3, r3, #12
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d0a6      	beq.n	8000996 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a48:	f7ff fc48 	bl	80002dc <HAL_GetTick>
 8000a4c:	1bc0      	subs	r0, r0, r7
 8000a4e:	4540      	cmp	r0, r8
 8000a50:	d9f5      	bls.n	8000a3e <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 8000a52:	2003      	movs	r0, #3
 8000a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000a58:	1e91      	subs	r1, r2, #2
 8000a5a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a5c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000a5e:	d802      	bhi.n	8000a66 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a64:	e7dc      	b.n	8000a20 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a66:	f013 0f02 	tst.w	r3, #2
 8000a6a:	e7d9      	b.n	8000a20 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d10a      	bne.n	8000a86 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a70:	68a3      	ldr	r3, [r4, #8]
 8000a72:	f003 030c 	and.w	r3, r3, #12
 8000a76:	2b08      	cmp	r3, #8
 8000a78:	d08d      	beq.n	8000996 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a7a:	f7ff fc2f 	bl	80002dc <HAL_GetTick>
 8000a7e:	1bc0      	subs	r0, r0, r7
 8000a80:	4540      	cmp	r0, r8
 8000a82:	d9f5      	bls.n	8000a70 <HAL_RCC_ClockConfig+0xf8>
 8000a84:	e7e5      	b.n	8000a52 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d10f      	bne.n	8000aaa <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000a8a:	68a3      	ldr	r3, [r4, #8]
 8000a8c:	f003 030c 	and.w	r3, r3, #12
 8000a90:	2b0c      	cmp	r3, #12
 8000a92:	d080      	beq.n	8000996 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a94:	f7ff fc22 	bl	80002dc <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	4540      	cmp	r0, r8
 8000a9c:	d9f5      	bls.n	8000a8a <HAL_RCC_ClockConfig+0x112>
 8000a9e:	e7d8      	b.n	8000a52 <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa0:	f7ff fc1c 	bl	80002dc <HAL_GetTick>
 8000aa4:	1bc0      	subs	r0, r0, r7
 8000aa6:	4540      	cmp	r0, r8
 8000aa8:	d8d3      	bhi.n	8000a52 <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000aaa:	68a3      	ldr	r3, [r4, #8]
 8000aac:	f013 0f0c 	tst.w	r3, #12
 8000ab0:	d1f6      	bne.n	8000aa0 <HAL_RCC_ClockConfig+0x128>
 8000ab2:	e770      	b.n	8000996 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ab4:	b2f2      	uxtb	r2, r6
 8000ab6:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	d19c      	bne.n	80009fc <HAL_RCC_ClockConfig+0x84>
 8000ac2:	e76f      	b.n	80009a4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ac4:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <HAL_RCC_ClockConfig+0x160>)
 8000ac6:	68e8      	ldr	r0, [r5, #12]
 8000ac8:	688b      	ldr	r3, [r1, #8]
 8000aca:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	608b      	str	r3, [r1, #8]
 8000ad2:	e76b      	b.n	80009ac <HAL_RCC_ClockConfig+0x34>
 8000ad4:	40023c00 	.word	0x40023c00
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	08002cb0 	.word	0x08002cb0
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ae4:	4b01      	ldr	r3, [pc, #4]	; (8000aec <HAL_RCC_GetHCLKFreq+0x8>)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008

08000af0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000af2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	fa92 f2a2 	rbit	r2, r2
 8000afc:	fab2 f282 	clz	r2, r2
 8000b00:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000b04:	40d3      	lsrs	r3, r2
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b08:	5cd3      	ldrb	r3, [r2, r3]
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b0c:	6810      	ldr	r0, [r2, #0]
}
 8000b0e:	40d8      	lsrs	r0, r3
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	08002cb0 	.word	0x08002cb0
 8000b1c:	20000008 	.word	0x20000008

08000b20 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b22:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	fa92 f2a2 	rbit	r2, r2
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000b34:	40d3      	lsrs	r3, r2
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000b38:	5cd3      	ldrb	r3, [r2, r3]
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000b3c:	6810      	ldr	r0, [r2, #0]
} 
 8000b3e:	40d8      	lsrs	r0, r3
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	08002cb0 	.word	0x08002cb0
 8000b4c:	20000008 	.word	0x20000008

08000b50 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b50:	6a03      	ldr	r3, [r0, #32]
 8000b52:	f023 0301 	bic.w	r3, r3, #1
 8000b56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b58:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000b5a:	6842      	ldr	r2, [r0, #4]
{
 8000b5c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b5e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000b60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000b62:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000b66:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000b68:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000b6a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000b6e:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000b70:	4c0c      	ldr	r4, [pc, #48]	; (8000ba4 <TIM_OC1_SetConfig+0x54>)
 8000b72:	42a0      	cmp	r0, r4
 8000b74:	d009      	beq.n	8000b8a <TIM_OC1_SetConfig+0x3a>
 8000b76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b7a:	42a0      	cmp	r0, r4
 8000b7c:	d005      	beq.n	8000b8a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b7e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000b80:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000b82:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000b84:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000b86:	6203      	str	r3, [r0, #32]
} 
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000b8a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000b8c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000b8e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000b92:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000b94:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000b96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000b9a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000b9c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000ba0:	4322      	orrs	r2, r4
 8000ba2:	e7ec      	b.n	8000b7e <TIM_OC1_SetConfig+0x2e>
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000ba8:	6a03      	ldr	r3, [r0, #32]
 8000baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bae:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000bb0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000bb2:	6842      	ldr	r2, [r0, #4]
{
 8000bb4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000bb6:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000bb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000bba:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000bbe:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000bc0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000bc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000bc6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000bca:	4c0e      	ldr	r4, [pc, #56]	; (8000c04 <TIM_OC3_SetConfig+0x5c>)
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	d009      	beq.n	8000be4 <TIM_OC3_SetConfig+0x3c>
 8000bd0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bd4:	42a0      	cmp	r0, r4
 8000bd6:	d005      	beq.n	8000be4 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bd8:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000bda:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000bdc:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000bde:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000be0:	6203      	str	r3, [r0, #32]
}
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000be4:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000be6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000bec:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000bf0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000bf2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000bf6:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000bfc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000c00:	e7ea      	b.n	8000bd8 <TIM_OC3_SetConfig+0x30>
 8000c02:	bf00      	nop
 8000c04:	40010000 	.word	0x40010000

08000c08 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000c08:	6a03      	ldr	r3, [r0, #32]
 8000c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c0e:	6203      	str	r3, [r0, #32]
{
 8000c10:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c12:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000c14:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000c16:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000c18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000c1a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000c1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000c22:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000c24:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000c28:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000c2c:	4d09      	ldr	r5, [pc, #36]	; (8000c54 <TIM_OC4_SetConfig+0x4c>)
 8000c2e:	42a8      	cmp	r0, r5
 8000c30:	d009      	beq.n	8000c46 <TIM_OC4_SetConfig+0x3e>
 8000c32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c36:	42a8      	cmp	r0, r5
 8000c38:	d005      	beq.n	8000c46 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c3a:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000c3c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000c3e:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000c40:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c42:	6204      	str	r4, [r0, #32]
}
 8000c44:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000c46:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000c4c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000c50:	e7f3      	b.n	8000c3a <TIM_OC4_SetConfig+0x32>
 8000c52:	bf00      	nop
 8000c54:	40010000 	.word	0x40010000

08000c58 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000c58:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000c5a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000c5c:	4290      	cmp	r0, r2
 8000c5e:	d012      	beq.n	8000c86 <TIM_Base_SetConfig+0x2e>
 8000c60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c64:	d00f      	beq.n	8000c86 <TIM_Base_SetConfig+0x2e>
 8000c66:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d00b      	beq.n	8000c86 <TIM_Base_SetConfig+0x2e>
 8000c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c72:	4290      	cmp	r0, r2
 8000c74:	d007      	beq.n	8000c86 <TIM_Base_SetConfig+0x2e>
 8000c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	d003      	beq.n	8000c86 <TIM_Base_SetConfig+0x2e>
 8000c7e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000c82:	4290      	cmp	r0, r2
 8000c84:	d11d      	bne.n	8000cc2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000c86:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c8c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <TIM_Base_SetConfig+0xbc>)
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d104      	bne.n	8000c9e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c94:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	e028      	b.n	8000cf0 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000c9e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ca2:	d0f7      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <TIM_Base_SetConfig+0xc0>)
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	d0f4      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	d0f0      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d0ec      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000cba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	d0e8      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <TIM_Base_SetConfig+0xc4>)
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d0e5      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d0e1      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d0dd      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000cd8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	d0d9      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	d0d5      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
 8000ce8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d0d1      	beq.n	8000c94 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8000cf0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000cf2:	688b      	ldr	r3, [r1, #8]
 8000cf4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000cf6:	680b      	ldr	r3, [r1, #0]
 8000cf8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <TIM_Base_SetConfig+0xbc>)
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	d006      	beq.n	8000d0e <TIM_Base_SetConfig+0xb6>
 8000d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d04:	4298      	cmp	r0, r3
 8000d06:	d002      	beq.n	8000d0e <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	6143      	str	r3, [r0, #20]
}
 8000d0c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000d0e:	690b      	ldr	r3, [r1, #16]
 8000d10:	6303      	str	r3, [r0, #48]	; 0x30
 8000d12:	e7f9      	b.n	8000d08 <TIM_Base_SetConfig+0xb0>
 8000d14:	40010000 	.word	0x40010000
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40014000 	.word	0x40014000

08000d20 <HAL_TIM_PWM_Init>:
{
 8000d20:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d22:	4604      	mov	r4, r0
 8000d24:	b1a0      	cbz	r0, 8000d50 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d26:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d2e:	b91b      	cbnz	r3, 8000d38 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d30:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000d34:	f001 f946 	bl	8001fc4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8000d38:	2302      	movs	r3, #2
 8000d3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000d3e:	6820      	ldr	r0, [r4, #0]
 8000d40:	1d21      	adds	r1, r4, #4
 8000d42:	f7ff ff89 	bl	8000c58 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
}  
 8000d52:	bd10      	pop	{r4, pc}

08000d54 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d54:	6a03      	ldr	r3, [r0, #32]
 8000d56:	f023 0310 	bic.w	r3, r3, #16
 8000d5a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000d5c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8000d5e:	6842      	ldr	r2, [r0, #4]
{
 8000d60:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8000d62:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000d66:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d6a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000d6e:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000d70:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000d74:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000d78:	4c0d      	ldr	r4, [pc, #52]	; (8000db0 <TIM_OC2_SetConfig+0x5c>)
 8000d7a:	42a0      	cmp	r0, r4
 8000d7c:	d009      	beq.n	8000d92 <TIM_OC2_SetConfig+0x3e>
 8000d7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000d82:	42a0      	cmp	r0, r4
 8000d84:	d005      	beq.n	8000d92 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8000d86:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8000d88:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000d8a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000d8c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000d8e:	6203      	str	r3, [r0, #32]
}
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000d92:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000d94:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000d9a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000d9e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000da0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000da4:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000daa:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8000dae:	e7ea      	b.n	8000d86 <TIM_OC2_SetConfig+0x32>
 8000db0:	40010000 	.word	0x40010000

08000db4 <HAL_TIM_PWM_ConfigChannel>:
{
 8000db4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000db6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000dba:	2b01      	cmp	r3, #1
{
 8000dbc:	4604      	mov	r4, r0
 8000dbe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000dc2:	d025      	beq.n	8000e10 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8000dca:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8000dce:	2a0c      	cmp	r2, #12
 8000dd0:	d818      	bhi.n	8000e04 <HAL_TIM_PWM_ConfigChannel+0x50>
 8000dd2:	e8df f002 	tbb	[pc, r2]
 8000dd6:	1707      	.short	0x1707
 8000dd8:	171e1717 	.word	0x171e1717
 8000ddc:	172f1717 	.word	0x172f1717
 8000de0:	1717      	.short	0x1717
 8000de2:	40          	.byte	0x40
 8000de3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000de4:	6820      	ldr	r0, [r4, #0]
 8000de6:	f7ff feb3 	bl	8000b50 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000dea:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000dec:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000dee:	699a      	ldr	r2, [r3, #24]
 8000df0:	f042 0208 	orr.w	r2, r2, #8
 8000df4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000df6:	699a      	ldr	r2, [r3, #24]
 8000df8:	f022 0204 	bic.w	r2, r2, #4
 8000dfc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000dfe:	699a      	ldr	r2, [r3, #24]
 8000e00:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000e02:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000e04:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000e06:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000e0c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8000e10:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000e12:	6820      	ldr	r0, [r4, #0]
 8000e14:	f7ff ff9e 	bl	8000d54 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000e18:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000e1a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000e24:	699a      	ldr	r2, [r3, #24]
 8000e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000e2c:	699a      	ldr	r2, [r3, #24]
 8000e2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e32:	e7e6      	b.n	8000e02 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000e34:	6820      	ldr	r0, [r4, #0]
 8000e36:	f7ff feb7 	bl	8000ba8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000e3a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8000e3c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000e3e:	69da      	ldr	r2, [r3, #28]
 8000e40:	f042 0208 	orr.w	r2, r2, #8
 8000e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000e46:	69da      	ldr	r2, [r3, #28]
 8000e48:	f022 0204 	bic.w	r2, r2, #4
 8000e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8000e4e:	69da      	ldr	r2, [r3, #28]
 8000e50:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000e52:	61da      	str	r2, [r3, #28]
    break;
 8000e54:	e7d6      	b.n	8000e04 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000e56:	6820      	ldr	r0, [r4, #0]
 8000e58:	f7ff fed6 	bl	8000c08 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000e5c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000e5e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000e60:	69da      	ldr	r2, [r3, #28]
 8000e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000e68:	69da      	ldr	r2, [r3, #28]
 8000e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8000e70:	69da      	ldr	r2, [r3, #28]
 8000e72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e76:	e7ec      	b.n	8000e52 <HAL_TIM_PWM_ConfigChannel+0x9e>

08000e78 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8000e78:	6a03      	ldr	r3, [r0, #32]
{
 8000e7a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8000e7c:	2401      	movs	r4, #1
 8000e7e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000e80:	ea23 0304 	bic.w	r3, r3, r4
 8000e84:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8000e86:	6a03      	ldr	r3, [r0, #32]
 8000e88:	408a      	lsls	r2, r1
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	6202      	str	r2, [r0, #32]
 8000e8e:	bd10      	pop	{r4, pc}

08000e90 <HAL_TIM_PWM_Start>:
{
 8000e90:	b510      	push	{r4, lr}
 8000e92:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000e94:	2201      	movs	r2, #1
 8000e96:	6800      	ldr	r0, [r0, #0]
 8000e98:	f7ff ffee 	bl	8000e78 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_TIM_PWM_Start+0x30>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d003      	beq.n	8000eac <HAL_TIM_PWM_Start+0x1c>
 8000ea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d103      	bne.n	8000eb4 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8000eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eb2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f042 0201 	orr.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
} 
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	bd10      	pop	{r4, pc}
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000ec4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ec8:	2b01      	cmp	r3, #1
{
 8000eca:	b510      	push	{r4, lr}
 8000ecc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000ed0:	d018      	beq.n	8000f04 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000ed2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000ed6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000ed8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000eda:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000edc:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000ede:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ee2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4322      	orrs	r2, r4
 8000ee8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000efe:	2300      	movs	r3, #0
 8000f00:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f04:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8000f06:	bd10      	pop	{r4, pc}

08000f08 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8000f08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f0c:	2b01      	cmp	r3, #1
{
 8000f0e:	b510      	push	{r4, lr}
 8000f10:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000f14:	d016      	beq.n	8000f44 <HAL_TIMEx_ConfigBreakDeadTime+0x3c>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000f16:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 8000f1a:	e891 0018 	ldmia.w	r1, {r3, r4}
 8000f1e:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8000f20:	688c      	ldr	r4, [r1, #8]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 8000f22:	6802      	ldr	r2, [r0, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8000f24:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->LockLevel        |
 8000f26:	68cc      	ldr	r4, [r1, #12]
 8000f28:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->DeadTime         |
 8000f2a:	690c      	ldr	r4, [r1, #16]
 8000f2c:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakState       |
 8000f2e:	694c      	ldr	r4, [r1, #20]
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8000f30:	6989      	ldr	r1, [r1, #24]
                                   sBreakDeadTimeConfig->BreakState       |
 8000f32:	4323      	orrs	r3, r4
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8000f34:	430b      	orrs	r3, r1
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 8000f36:	6453      	str	r3, [r2, #68]	; 0x44
                                   sBreakDeadTimeConfig->AutomaticOutput;
  
                                   
  htim->State = HAL_TIM_STATE_READY;                                 
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f44:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8000f46:	bd10      	pop	{r4, pc}

08000f48 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000f48:	6803      	ldr	r3, [r0, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000f50:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f52:	695a      	ldr	r2, [r3, #20]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000f60:	4770      	bx	lr
	...

08000f64 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000f68:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000f6a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000f6c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f6e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000f74:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000f76:	6133      	str	r3, [r6, #16]
{
 8000f78:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f7a:	6883      	ldr	r3, [r0, #8]
 8000f7c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000f7e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f80:	4303      	orrs	r3, r0
 8000f82:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000f84:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f88:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000f8a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000f92:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000f94:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000f96:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000f9c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f9e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000fa2:	6173      	str	r3, [r6, #20]
 8000fa4:	4b7a      	ldr	r3, [pc, #488]	; (8001190 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fa6:	d17c      	bne.n	80010a2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000fa8:	429e      	cmp	r6, r3
 8000faa:	d003      	beq.n	8000fb4 <UART_SetConfig+0x50>
 8000fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fb0:	429e      	cmp	r6, r3
 8000fb2:	d144      	bne.n	800103e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000fb4:	f7ff fdb4 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
 8000fb8:	2519      	movs	r5, #25
 8000fba:	fb05 f300 	mul.w	r3, r5, r0
 8000fbe:	6860      	ldr	r0, [r4, #4]
 8000fc0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fc4:	0040      	lsls	r0, r0, #1
 8000fc6:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fca:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000fd2:	f7ff fda5 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
 8000fd6:	6863      	ldr	r3, [r4, #4]
 8000fd8:	4368      	muls	r0, r5
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fbb0 f7f3 	udiv	r7, r0, r3
 8000fe0:	f7ff fd9e 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
 8000fe4:	6863      	ldr	r3, [r4, #4]
 8000fe6:	4368      	muls	r0, r5
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fee:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ff2:	fb09 7313 	mls	r3, r9, r3, r7
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	3332      	adds	r3, #50	; 0x32
 8000ffa:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001004:	f7ff fd8c 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
 8001008:	6862      	ldr	r2, [r4, #4]
 800100a:	4368      	muls	r0, r5
 800100c:	0052      	lsls	r2, r2, #1
 800100e:	fbb0 faf2 	udiv	sl, r0, r2
 8001012:	f7ff fd85 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001016:	6863      	ldr	r3, [r4, #4]
 8001018:	4368      	muls	r0, r5
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001020:	fbb3 f3f9 	udiv	r3, r3, r9
 8001024:	fb09 a313 	mls	r3, r9, r3, sl
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	3332      	adds	r3, #50	; 0x32
 800102c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	4443      	add	r3, r8
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001036:	443b      	add	r3, r7
 8001038:	60b3      	str	r3, [r6, #8]
 800103a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800103e:	f7ff fd57 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 8001042:	2519      	movs	r5, #25
 8001044:	fb05 f300 	mul.w	r3, r5, r0
 8001048:	6860      	ldr	r0, [r4, #4]
 800104a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800104e:	0040      	lsls	r0, r0, #1
 8001050:	fbb3 f3f0 	udiv	r3, r3, r0
 8001054:	fbb3 f3f9 	udiv	r3, r3, r9
 8001058:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800105c:	f7ff fd48 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 8001060:	6863      	ldr	r3, [r4, #4]
 8001062:	4368      	muls	r0, r5
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fbb0 f7f3 	udiv	r7, r0, r3
 800106a:	f7ff fd41 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 800106e:	6863      	ldr	r3, [r4, #4]
 8001070:	4368      	muls	r0, r5
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fbb0 f3f3 	udiv	r3, r0, r3
 8001078:	fbb3 f3f9 	udiv	r3, r3, r9
 800107c:	fb09 7313 	mls	r3, r9, r3, r7
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	3332      	adds	r3, #50	; 0x32
 8001084:	fbb3 f3f9 	udiv	r3, r3, r9
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800108e:	f7ff fd2f 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 8001092:	6862      	ldr	r2, [r4, #4]
 8001094:	4368      	muls	r0, r5
 8001096:	0052      	lsls	r2, r2, #1
 8001098:	fbb0 faf2 	udiv	sl, r0, r2
 800109c:	f7ff fd28 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 80010a0:	e7b9      	b.n	8001016 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80010a2:	429e      	cmp	r6, r3
 80010a4:	d002      	beq.n	80010ac <UART_SetConfig+0x148>
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <UART_SetConfig+0x230>)
 80010a8:	429e      	cmp	r6, r3
 80010aa:	d140      	bne.n	800112e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010ac:	f7ff fd38 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
 80010b0:	6867      	ldr	r7, [r4, #4]
 80010b2:	2519      	movs	r5, #25
 80010b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010b8:	fb05 f300 	mul.w	r3, r5, r0
 80010bc:	00bf      	lsls	r7, r7, #2
 80010be:	fbb3 f3f7 	udiv	r3, r3, r7
 80010c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80010c6:	011f      	lsls	r7, r3, #4
 80010c8:	f7ff fd2a 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
 80010cc:	6863      	ldr	r3, [r4, #4]
 80010ce:	4368      	muls	r0, r5
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	fbb0 f8f3 	udiv	r8, r0, r3
 80010d6:	f7ff fd23 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
 80010da:	6863      	ldr	r3, [r4, #4]
 80010dc:	4368      	muls	r0, r5
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80010e8:	fb09 8313 	mls	r3, r9, r3, r8
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	3332      	adds	r3, #50	; 0x32
 80010f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80010f4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80010f8:	f7ff fd12 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
 80010fc:	6862      	ldr	r2, [r4, #4]
 80010fe:	4368      	muls	r0, r5
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	fbb0 faf2 	udiv	sl, r0, r2
 8001106:	f7ff fd0b 	bl	8000b20 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800110a:	6863      	ldr	r3, [r4, #4]
 800110c:	4368      	muls	r0, r5
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fbb0 f3f3 	udiv	r3, r0, r3
 8001114:	fbb3 f3f9 	udiv	r3, r3, r9
 8001118:	fb09 a313 	mls	r3, r9, r3, sl
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	3332      	adds	r3, #50	; 0x32
 8001120:	fbb3 f3f9 	udiv	r3, r3, r9
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	ea43 0308 	orr.w	r3, r3, r8
 800112c:	e783      	b.n	8001036 <UART_SetConfig+0xd2>
 800112e:	f7ff fcdf 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 8001132:	6867      	ldr	r7, [r4, #4]
 8001134:	2519      	movs	r5, #25
 8001136:	f04f 0964 	mov.w	r9, #100	; 0x64
 800113a:	fb05 f300 	mul.w	r3, r5, r0
 800113e:	00bf      	lsls	r7, r7, #2
 8001140:	fbb3 f3f7 	udiv	r3, r3, r7
 8001144:	fbb3 f3f9 	udiv	r3, r3, r9
 8001148:	011f      	lsls	r7, r3, #4
 800114a:	f7ff fcd1 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 800114e:	6863      	ldr	r3, [r4, #4]
 8001150:	4368      	muls	r0, r5
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fbb0 f8f3 	udiv	r8, r0, r3
 8001158:	f7ff fcca 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 800115c:	6863      	ldr	r3, [r4, #4]
 800115e:	4368      	muls	r0, r5
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	fbb0 f3f3 	udiv	r3, r0, r3
 8001166:	fbb3 f3f9 	udiv	r3, r3, r9
 800116a:	fb09 8313 	mls	r3, r9, r3, r8
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	3332      	adds	r3, #50	; 0x32
 8001172:	fbb3 f3f9 	udiv	r3, r3, r9
 8001176:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800117a:	f7ff fcb9 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 800117e:	6862      	ldr	r2, [r4, #4]
 8001180:	4368      	muls	r0, r5
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	fbb0 faf2 	udiv	sl, r0, r2
 8001188:	f7ff fcb2 	bl	8000af0 <HAL_RCC_GetPCLK1Freq>
 800118c:	e7bd      	b.n	800110a <UART_SetConfig+0x1a6>
 800118e:	bf00      	nop
 8001190:	40011000 	.word	0x40011000
 8001194:	40011400 	.word	0x40011400

08001198 <HAL_UART_Init>:
{
 8001198:	b510      	push	{r4, lr}
  if(huart == NULL)
 800119a:	4604      	mov	r4, r0
 800119c:	b340      	cbz	r0, 80011f0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800119e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011a6:	b91b      	cbnz	r3, 80011b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80011a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80011ac:	f000 ffd4 	bl	8002158 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80011b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011b2:	2324      	movs	r3, #36	; 0x24
 80011b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80011b8:	68d3      	ldr	r3, [r2, #12]
 80011ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fecf 	bl	8000f64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011e0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80011e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80011e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80011ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80011ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011f0:	2001      	movs	r0, #1
}
 80011f2:	bd10      	pop	{r4, pc}

080011f4 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 80011f4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011f8:	2b20      	cmp	r3, #32
 80011fa:	d118      	bne.n	800122e <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL ) || (Size == 0U)) 
 80011fc:	b1a9      	cbz	r1, 800122a <HAL_UART_Transmit_IT+0x36>
 80011fe:	b1a2      	cbz	r2, 800122a <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001200:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001204:	2b01      	cmp	r3, #1
 8001206:	d012      	beq.n	800122e <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8001208:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 800120a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800120c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800120e:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001210:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001212:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001214:	2221      	movs	r2, #33	; 0x21
 8001216:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800121a:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 800121c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001220:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001224:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001226:	4618      	mov	r0, r3
 8001228:	4770      	bx	lr
      return HAL_ERROR;
 800122a:	2001      	movs	r0, #1
 800122c:	4770      	bx	lr
    return HAL_BUSY;   
 800122e:	2002      	movs	r0, #2
}
 8001230:	4770      	bx	lr

08001232 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001232:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001236:	2b20      	cmp	r3, #32
 8001238:	d11c      	bne.n	8001274 <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0U)) 
 800123a:	b1c9      	cbz	r1, 8001270 <HAL_UART_Receive_IT+0x3e>
 800123c:	b1c2      	cbz	r2, 8001270 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 800123e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001242:	2b01      	cmp	r3, #1
 8001244:	d016      	beq.n	8001274 <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 8001246:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001248:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800124a:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800124c:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800124e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001250:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001254:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001256:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001258:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 800125a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800125e:	f041 0101 	orr.w	r1, r1, #1
 8001262:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001264:	68d1      	ldr	r1, [r2, #12]
 8001266:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 800126a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800126c:	4618      	mov	r0, r3
 800126e:	4770      	bx	lr
      return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
 8001272:	4770      	bx	lr
    return HAL_BUSY; 
 8001274:	2002      	movs	r0, #2
}
 8001276:	4770      	bx	lr

08001278 <HAL_UART_TxCpltCallback>:
 8001278:	4770      	bx	lr

0800127a <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800127a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800127e:	2b22      	cmp	r3, #34	; 0x22
{
 8001280:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001282:	d132      	bne.n	80012ea <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001284:	6883      	ldr	r3, [r0, #8]
 8001286:	6901      	ldr	r1, [r0, #16]
 8001288:	6802      	ldr	r2, [r0, #0]
 800128a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800128e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001290:	d11f      	bne.n	80012d2 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001292:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001294:	b9c9      	cbnz	r1, 80012ca <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800129a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800129e:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80012a0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80012a2:	3c01      	subs	r4, #1
 80012a4:	b2a4      	uxth	r4, r4
 80012a6:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80012a8:	b96c      	cbnz	r4, 80012c6 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012aa:	6803      	ldr	r3, [r0, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80012b2:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	f022 0201 	bic.w	r2, r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80012bc:	2320      	movs	r3, #32
 80012be:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80012c2:	f000 f8bd 	bl	8001440 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80012c6:	2000      	movs	r0, #0
}
 80012c8:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	f823 2b01 	strh.w	r2, [r3], #1
 80012d0:	e7e5      	b.n	800129e <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80012d2:	b921      	cbnz	r1, 80012de <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 80012d4:	1c59      	adds	r1, r3, #1
 80012d6:	6852      	ldr	r2, [r2, #4]
 80012d8:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e7e0      	b.n	80012a0 <UART_Receive_IT+0x26>
 80012de:	6852      	ldr	r2, [r2, #4]
 80012e0:	1c59      	adds	r1, r3, #1
 80012e2:	6281      	str	r1, [r0, #40]	; 0x28
 80012e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012e8:	e7f7      	b.n	80012da <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80012ea:	2002      	movs	r0, #2
 80012ec:	bd10      	pop	{r4, pc}

080012ee <HAL_UART_ErrorCallback>:
 80012ee:	4770      	bx	lr

080012f0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80012f0:	6803      	ldr	r3, [r0, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012f4:	68d9      	ldr	r1, [r3, #12]
{
 80012f6:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80012f8:	0716      	lsls	r6, r2, #28
{
 80012fa:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80012fc:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80012fe:	d107      	bne.n	8001310 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001300:	0696      	lsls	r6, r2, #26
 8001302:	d55a      	bpl.n	80013ba <HAL_UART_IRQHandler+0xca>
 8001304:	068d      	lsls	r5, r1, #26
 8001306:	d558      	bpl.n	80013ba <HAL_UART_IRQHandler+0xca>
}
 8001308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800130c:	f7ff bfb5 	b.w	800127a <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001310:	f015 0501 	ands.w	r5, r5, #1
 8001314:	d102      	bne.n	800131c <HAL_UART_IRQHandler+0x2c>
 8001316:	f411 7f90 	tst.w	r1, #288	; 0x120
 800131a:	d04e      	beq.n	80013ba <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800131c:	07d3      	lsls	r3, r2, #31
 800131e:	d505      	bpl.n	800132c <HAL_UART_IRQHandler+0x3c>
 8001320:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001322:	bf42      	ittt	mi
 8001324:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001326:	f043 0301 	orrmi.w	r3, r3, #1
 800132a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800132c:	0750      	lsls	r0, r2, #29
 800132e:	d504      	bpl.n	800133a <HAL_UART_IRQHandler+0x4a>
 8001330:	b11d      	cbz	r5, 800133a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001332:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800133a:	0793      	lsls	r3, r2, #30
 800133c:	d504      	bpl.n	8001348 <HAL_UART_IRQHandler+0x58>
 800133e:	b11d      	cbz	r5, 8001348 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001340:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001348:	0716      	lsls	r6, r2, #28
 800134a:	d504      	bpl.n	8001356 <HAL_UART_IRQHandler+0x66>
 800134c:	b11d      	cbz	r5, 8001356 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800134e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001356:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001358:	2b00      	cmp	r3, #0
 800135a:	d066      	beq.n	800142a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800135c:	0695      	lsls	r5, r2, #26
 800135e:	d504      	bpl.n	800136a <HAL_UART_IRQHandler+0x7a>
 8001360:	0688      	lsls	r0, r1, #26
 8001362:	d502      	bpl.n	800136a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff ff88 	bl	800127a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800136e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001370:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001372:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001374:	d402      	bmi.n	800137c <HAL_UART_IRQHandler+0x8c>
 8001376:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800137a:	d01a      	beq.n	80013b2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800137c:	f7ff fde4 	bl	8000f48 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	0652      	lsls	r2, r2, #25
 8001386:	d510      	bpl.n	80013aa <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001388:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800138a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800138c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001390:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001392:	b150      	cbz	r0, 80013aa <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_UART_IRQHandler+0x13c>)
 8001396:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001398:	f7ff f82d 	bl	80003f6 <HAL_DMA_Abort_IT>
 800139c:	2800      	cmp	r0, #0
 800139e:	d044      	beq.n	800142a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80013a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80013a8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff ff9f 	bl	80012ee <HAL_UART_ErrorCallback>
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80013b2:	f7ff ff9c 	bl	80012ee <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013ba:	0616      	lsls	r6, r2, #24
 80013bc:	d527      	bpl.n	800140e <HAL_UART_IRQHandler+0x11e>
 80013be:	060d      	lsls	r5, r1, #24
 80013c0:	d525      	bpl.n	800140e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80013c2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80013c6:	2a21      	cmp	r2, #33	; 0x21
 80013c8:	d12f      	bne.n	800142a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013ca:	68a2      	ldr	r2, [r4, #8]
 80013cc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80013d0:	6a22      	ldr	r2, [r4, #32]
 80013d2:	d117      	bne.n	8001404 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 80013d4:	8811      	ldrh	r1, [r2, #0]
 80013d6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80013da:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80013dc:	6921      	ldr	r1, [r4, #16]
 80013de:	b979      	cbnz	r1, 8001400 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80013e0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80013e2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80013e4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80013e6:	3a01      	subs	r2, #1
 80013e8:	b292      	uxth	r2, r2
 80013ea:	84e2      	strh	r2, [r4, #38]	; 0x26
 80013ec:	b9ea      	cbnz	r2, 800142a <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f4:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001400:	3201      	adds	r2, #1
 8001402:	e7ee      	b.n	80013e2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8001404:	1c51      	adds	r1, r2, #1
 8001406:	6221      	str	r1, [r4, #32]
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	e7ea      	b.n	80013e4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800140e:	0650      	lsls	r0, r2, #25
 8001410:	d50b      	bpl.n	800142a <HAL_UART_IRQHandler+0x13a>
 8001412:	064a      	lsls	r2, r1, #25
 8001414:	d509      	bpl.n	800142a <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800141c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800141e:	2320      	movs	r3, #32
 8001420:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff ff27 	bl	8001278 <HAL_UART_TxCpltCallback>
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	08001431 	.word	0x08001431

08001430 <UART_DMAAbortOnError>:
{
 8001430:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001432:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 8001438:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800143a:	f7ff ff58 	bl	80012ee <HAL_UART_ErrorCallback>
 800143e:	bd08      	pop	{r3, pc}

08001440 <HAL_UART_RxCpltCallback>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001440:	b538      	push	{r3, r4, r5, lr}
	if (mod_state ==  0) {
 8001442:	4c0f      	ldr	r4, [pc, #60]	; (8001480 <HAL_UART_RxCpltCallback+0x40>)
 8001444:	6825      	ldr	r5, [r4, #0]
 8001446:	b98d      	cbnz	r5, 800146c <HAL_UART_RxCpltCallback+0x2c>
	k = atoi(&Received);
 8001448:	480e      	ldr	r0, [pc, #56]	; (8001484 <HAL_UART_RxCpltCallback+0x44>)
 800144a:	f000 ff1a 	bl	8002282 <atoi>
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_UART_RxCpltCallback+0x48>)
	HAL_UART_Receive_IT(&huart4, &Received, 1);
 8001450:	2201      	movs	r2, #1
	k = atoi(&Received);
 8001452:	6018      	str	r0, [r3, #0]
	} else if (mod_state == 1) {
	m = atoi(&Received);
	HAL_UART_Receive_IT(&huart4, &Received, 1);
 8001454:	490b      	ldr	r1, [pc, #44]	; (8001484 <HAL_UART_RxCpltCallback+0x44>)
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <HAL_UART_RxCpltCallback+0x4c>)
 8001458:	f7ff feeb 	bl	8001232 <HAL_UART_Receive_IT>
	}
	mod_state = (mod_state + 1) % 2;
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	bf48      	it	mi
 8001466:	425b      	negmi	r3, r3
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	bd38      	pop	{r3, r4, r5, pc}
	} else if (mod_state == 1) {
 800146c:	2d01      	cmp	r5, #1
 800146e:	d1f5      	bne.n	800145c <HAL_UART_RxCpltCallback+0x1c>
	m = atoi(&Received);
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <HAL_UART_RxCpltCallback+0x44>)
 8001472:	f000 ff06 	bl	8002282 <atoi>
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_UART_RxCpltCallback+0x50>)
	HAL_UART_Receive_IT(&huart4, &Received, 1);
 8001478:	462a      	mov	r2, r5
	m = atoi(&Received);
 800147a:	6018      	str	r0, [r3, #0]
 800147c:	e7ea      	b.n	8001454 <HAL_UART_RxCpltCallback+0x14>
 800147e:	bf00      	nop
 8001480:	2000020c 	.word	0x2000020c
 8001484:	20000224 	.word	0x20000224
 8001488:	20000204 	.word	0x20000204
 800148c:	2000034c 	.word	0x2000034c
 8001490:	20000208 	.word	0x20000208

08001494 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001494:	b530      	push	{r4, r5, lr}
 8001496:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <SystemClock_Config+0xa8>)
 800149a:	2100      	movs	r1, #0
 800149c:	9101      	str	r1, [sp, #4]
 800149e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <SystemClock_Config+0xac>)
 80014b2:	9102      	str	r1, [sp, #8]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c6:	2301      	movs	r3, #1
 80014c8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014ca:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014ce:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014d6:	2319      	movs	r3, #25
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014da:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014dc:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014de:	f44f 73a8 	mov.w	r3, #336	; 0x150
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014e6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e8:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014ea:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ec:	f7ff f876 	bl	80005dc <HAL_RCC_OscConfig>
 80014f0:	b100      	cbz	r0, 80014f4 <SystemClock_Config+0x60>
 80014f2:	e7fe      	b.n	80014f2 <SystemClock_Config+0x5e>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014fe:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001500:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001506:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001508:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800150a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800150c:	f7ff fa34 	bl	8000978 <HAL_RCC_ClockConfig>
 8001510:	4604      	mov	r4, r0
 8001512:	b100      	cbz	r0, 8001516 <SystemClock_Config+0x82>
 8001514:	e7fe      	b.n	8001514 <SystemClock_Config+0x80>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001516:	f7ff fae5 	bl	8000ae4 <HAL_RCC_GetHCLKFreq>
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001522:	f7fe ff41 	bl	80003a8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001526:	4628      	mov	r0, r5
 8001528:	f7fe ff54 	bl	80003d4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800152c:	4622      	mov	r2, r4
 800152e:	4621      	mov	r1, r4
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7fe fef8 	bl	8000328 <HAL_NVIC_SetPriority>
}
 8001538:	b015      	add	sp, #84	; 0x54
 800153a:	bd30      	pop	{r4, r5, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <main>:
{
 8001544:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001548:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 800154a:	f7fe fea5 	bl	8000298 <HAL_Init>
  SystemClock_Config();
 800154e:	f7ff ffa1 	bl	8001494 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001552:	4b92      	ldr	r3, [pc, #584]	; (800179c <main+0x258>)
  htim2.Instance = TIM2;
 8001554:	4c92      	ldr	r4, [pc, #584]	; (80017a0 <main+0x25c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2200      	movs	r2, #0
 8001558:	9202      	str	r2, [sp, #8]
 800155a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800155c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001560:	6319      	str	r1, [r3, #48]	; 0x30
 8001562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001564:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001568:	9102      	str	r1, [sp, #8]
 800156a:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	9203      	str	r2, [sp, #12]
 800156e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001570:	f041 0101 	orr.w	r1, r1, #1
 8001574:	6319      	str	r1, [r3, #48]	; 0x30
 8001576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001578:	f001 0101 	and.w	r1, r1, #1
 800157c:	9103      	str	r1, [sp, #12]
 800157e:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001580:	9204      	str	r2, [sp, #16]
 8001582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001584:	f041 0102 	orr.w	r1, r1, #2
 8001588:	6319      	str	r1, [r3, #48]	; 0x30
 800158a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800158c:	f001 0102 	and.w	r1, r1, #2
 8001590:	9104      	str	r1, [sp, #16]
 8001592:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	9205      	str	r2, [sp, #20]
 8001596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001598:	f041 0104 	orr.w	r1, r1, #4
 800159c:	6319      	str	r1, [r3, #48]	; 0x30
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	60a2      	str	r2, [r4, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	9305      	str	r3, [sp, #20]
 80015a8:	9b05      	ldr	r3, [sp, #20]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	6122      	str	r2, [r4, #16]
  htim2.Init.Prescaler = 83;
 80015ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b0:	f04f 0853 	mov.w	r8, #83	; 0x53
  htim2.Init.Period = 19999;
 80015b4:	f644 671f 	movw	r7, #19999	; 0x4e1f
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015b8:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 83;
 80015ba:	e884 0108 	stmia.w	r4, {r3, r8}
  htim2.Init.Period = 19999;
 80015be:	60e7      	str	r7, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015c0:	f7ff fbae 	bl	8000d20 <HAL_TIM_PWM_Init>
 80015c4:	b100      	cbz	r0, 80015c8 <main+0x84>
 80015c6:	e7fe      	b.n	80015c6 <main+0x82>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015cc:	a908      	add	r1, sp, #32
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff fc78 	bl	8000ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80015d4:	4602      	mov	r2, r0
 80015d6:	b100      	cbz	r0, 80015da <main+0x96>
 80015d8:	e7fe      	b.n	80015d8 <main+0x94>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015da:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 0;
 80015dc:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015de:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e0:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e2:	a90f      	add	r1, sp, #60	; 0x3c
 80015e4:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e6:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e8:	f7ff fbe4 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 80015ec:	b100      	cbz	r0, 80015f0 <main+0xac>
 80015ee:	e7fe      	b.n	80015ee <main+0xaa>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f0:	2204      	movs	r2, #4
 80015f2:	a90f      	add	r1, sp, #60	; 0x3c
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff fbdd 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	b100      	cbz	r0, 80015fe <main+0xba>
 80015fc:	e7fe      	b.n	80015fc <main+0xb8>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015fe:	2208      	movs	r2, #8
 8001600:	a90f      	add	r1, sp, #60	; 0x3c
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff fbd6 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 8001608:	b100      	cbz	r0, 800160c <main+0xc8>
 800160a:	e7fe      	b.n	800160a <main+0xc6>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800160c:	220c      	movs	r2, #12
 800160e:	a90f      	add	r1, sp, #60	; 0x3c
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff fbcf 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 8001616:	4605      	mov	r5, r0
 8001618:	b100      	cbz	r0, 800161c <main+0xd8>
 800161a:	e7fe      	b.n	800161a <main+0xd6>
  HAL_TIM_MspPostInit(&htim2);
 800161c:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 800161e:	4c61      	ldr	r4, [pc, #388]	; (80017a4 <main+0x260>)
  HAL_TIM_MspPostInit(&htim2);
 8001620:	f000 fd2e 	bl	8002080 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8001624:	4b60      	ldr	r3, [pc, #384]	; (80017a8 <main+0x264>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001628:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 83;
 800162a:	e884 0108 	stmia.w	r4, {r3, r8}
  htim3.Init.Period = 19999;
 800162e:	60e7      	str	r7, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001632:	f7ff fb75 	bl	8000d20 <HAL_TIM_PWM_Init>
 8001636:	b100      	cbz	r0, 800163a <main+0xf6>
 8001638:	e7fe      	b.n	8001638 <main+0xf4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163a:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800163e:	a908      	add	r1, sp, #32
 8001640:	4620      	mov	r0, r4
 8001642:	f7ff fc3f 	bl	8000ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4602      	mov	r2, r0
 8001648:	b100      	cbz	r0, 800164c <main+0x108>
 800164a:	e7fe      	b.n	800164a <main+0x106>
  sConfigOC.Pulse = 0;
 800164c:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164e:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001650:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001652:	a90f      	add	r1, sp, #60	; 0x3c
 8001654:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001656:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001658:	f7ff fbac 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 800165c:	b100      	cbz	r0, 8001660 <main+0x11c>
 800165e:	e7fe      	b.n	800165e <main+0x11a>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001660:	2204      	movs	r2, #4
 8001662:	a90f      	add	r1, sp, #60	; 0x3c
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fba5 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 800166a:	b100      	cbz	r0, 800166e <main+0x12a>
 800166c:	e7fe      	b.n	800166c <main+0x128>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800166e:	2208      	movs	r2, #8
 8001670:	a90f      	add	r1, sp, #60	; 0x3c
 8001672:	484c      	ldr	r0, [pc, #304]	; (80017a4 <main+0x260>)
 8001674:	f7ff fb9e 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 8001678:	b100      	cbz	r0, 800167c <main+0x138>
 800167a:	e7fe      	b.n	800167a <main+0x136>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800167c:	220c      	movs	r2, #12
 800167e:	a90f      	add	r1, sp, #60	; 0x3c
 8001680:	4848      	ldr	r0, [pc, #288]	; (80017a4 <main+0x260>)
 8001682:	f7ff fb97 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 8001686:	4605      	mov	r5, r0
 8001688:	b100      	cbz	r0, 800168c <main+0x148>
 800168a:	e7fe      	b.n	800168a <main+0x146>
  htim4.Instance = TIM4;
 800168c:	4c47      	ldr	r4, [pc, #284]	; (80017ac <main+0x268>)
  HAL_TIM_MspPostInit(&htim3);
 800168e:	4845      	ldr	r0, [pc, #276]	; (80017a4 <main+0x260>)
 8001690:	f000 fcf6 	bl	8002080 <HAL_TIM_MspPostInit>
  htim4.Init.Prescaler = 83;
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <main+0x26c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	60a5      	str	r5, [r4, #8]
  htim4.Init.Prescaler = 83;
 8001698:	2753      	movs	r7, #83	; 0x53
  htim4.Init.Period = 19999;
 800169a:	f644 661f 	movw	r6, #19999	; 0x4e1f
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800169e:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 83;
 80016a0:	e884 0088 	stmia.w	r4, {r3, r7}
  htim4.Init.Period = 19999;
 80016a4:	60e6      	str	r6, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016a8:	f7ff fb3a 	bl	8000d20 <HAL_TIM_PWM_Init>
 80016ac:	b100      	cbz	r0, 80016b0 <main+0x16c>
 80016ae:	e7fe      	b.n	80016ae <main+0x16a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b0:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b2:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016b4:	a908      	add	r1, sp, #32
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff fc04 	bl	8000ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4602      	mov	r2, r0
 80016be:	b100      	cbz	r0, 80016c2 <main+0x17e>
 80016c0:	e7fe      	b.n	80016c0 <main+0x17c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c2:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80016c4:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c6:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c8:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ca:	a90f      	add	r1, sp, #60	; 0x3c
 80016cc:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ce:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d0:	f7ff fb70 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 80016d4:	b100      	cbz	r0, 80016d8 <main+0x194>
 80016d6:	e7fe      	b.n	80016d6 <main+0x192>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d8:	2204      	movs	r2, #4
 80016da:	a90f      	add	r1, sp, #60	; 0x3c
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fb69 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 80016e2:	b100      	cbz	r0, 80016e6 <main+0x1a2>
 80016e4:	e7fe      	b.n	80016e4 <main+0x1a0>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e6:	2208      	movs	r2, #8
 80016e8:	a90f      	add	r1, sp, #60	; 0x3c
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff fb62 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 80016f0:	b100      	cbz	r0, 80016f4 <main+0x1b0>
 80016f2:	e7fe      	b.n	80016f2 <main+0x1ae>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016f4:	220c      	movs	r2, #12
 80016f6:	a90f      	add	r1, sp, #60	; 0x3c
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff fb5b 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4605      	mov	r5, r0
 8001700:	b100      	cbz	r0, 8001704 <main+0x1c0>
 8001702:	e7fe      	b.n	8001702 <main+0x1be>
  HAL_TIM_MspPostInit(&htim4);
 8001704:	4620      	mov	r0, r4
  htim5.Instance = TIM5;
 8001706:	4c2b      	ldr	r4, [pc, #172]	; (80017b4 <main+0x270>)
  HAL_TIM_MspPostInit(&htim4);
 8001708:	f000 fcba 	bl	8002080 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <main+0x274>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001710:	4620      	mov	r0, r4
  htim5.Init.Prescaler = 83;
 8001712:	e884 0088 	stmia.w	r4, {r3, r7}
  htim5.Init.Period = 19999;
 8001716:	60e6      	str	r6, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001718:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800171a:	f7ff fb01 	bl	8000d20 <HAL_TIM_PWM_Init>
 800171e:	b100      	cbz	r0, 8001722 <main+0x1de>
 8001720:	e7fe      	b.n	8001720 <main+0x1dc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001722:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001726:	a908      	add	r1, sp, #32
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff fbcb 	bl	8000ec4 <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	b100      	cbz	r0, 8001732 <main+0x1ee>
 8001730:	e7fe      	b.n	8001730 <main+0x1ec>
  sConfigOC.Pulse = 0;
 8001732:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001734:	2660      	movs	r6, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001736:	a90f      	add	r1, sp, #60	; 0x3c
 8001738:	481e      	ldr	r0, [pc, #120]	; (80017b4 <main+0x270>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173a:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 800173c:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173e:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001740:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001742:	f7ff fb37 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 8001746:	b100      	cbz	r0, 800174a <main+0x206>
 8001748:	e7fe      	b.n	8001748 <main+0x204>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800174a:	2204      	movs	r2, #4
 800174c:	a90f      	add	r1, sp, #60	; 0x3c
 800174e:	4819      	ldr	r0, [pc, #100]	; (80017b4 <main+0x270>)
 8001750:	f7ff fb30 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 8001754:	b100      	cbz	r0, 8001758 <main+0x214>
 8001756:	e7fe      	b.n	8001756 <main+0x212>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001758:	2208      	movs	r2, #8
 800175a:	a90f      	add	r1, sp, #60	; 0x3c
 800175c:	4815      	ldr	r0, [pc, #84]	; (80017b4 <main+0x270>)
 800175e:	f7ff fb29 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 8001762:	b100      	cbz	r0, 8001766 <main+0x222>
 8001764:	e7fe      	b.n	8001764 <main+0x220>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001766:	220c      	movs	r2, #12
 8001768:	a90f      	add	r1, sp, #60	; 0x3c
 800176a:	4812      	ldr	r0, [pc, #72]	; (80017b4 <main+0x270>)
 800176c:	f7ff fb22 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 8001770:	4605      	mov	r5, r0
 8001772:	b100      	cbz	r0, 8001776 <main+0x232>
 8001774:	e7fe      	b.n	8001774 <main+0x230>
  HAL_TIM_MspPostInit(&htim5);
 8001776:	480f      	ldr	r0, [pc, #60]	; (80017b4 <main+0x270>)
  htim1.Instance = TIM1;
 8001778:	4c10      	ldr	r4, [pc, #64]	; (80017bc <main+0x278>)
  HAL_TIM_MspPostInit(&htim5);
 800177a:	f000 fc81 	bl	8002080 <HAL_TIM_MspPostInit>
  htim1.Init.Prescaler = 167;
 800177e:	4910      	ldr	r1, [pc, #64]	; (80017c0 <main+0x27c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	60a5      	str	r5, [r4, #8]
  htim1.Init.Prescaler = 167;
 8001782:	23a7      	movs	r3, #167	; 0xa7
 8001784:	e884 000a 	stmia.w	r4, {r1, r3}
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001788:	4620      	mov	r0, r4
  htim1.Init.Period = 19999;
 800178a:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800178e:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001792:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001794:	f7ff fac4 	bl	8000d20 <HAL_TIM_PWM_Init>
 8001798:	b1a0      	cbz	r0, 80017c4 <main+0x280>
 800179a:	e7fe      	b.n	800179a <main+0x256>
 800179c:	40023800 	.word	0x40023800
 80017a0:	2000038c 	.word	0x2000038c
 80017a4:	200002a0 	.word	0x200002a0
 80017a8:	40000400 	.word	0x40000400
 80017ac:	20000228 	.word	0x20000228
 80017b0:	40000800 	.word	0x40000800
 80017b4:	20000264 	.word	0x20000264
 80017b8:	40000c00 	.word	0x40000c00
 80017bc:	20000310 	.word	0x20000310
 80017c0:	40010000 	.word	0x40010000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017c8:	a906      	add	r1, sp, #24
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff fb7a 	bl	8000ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80017d0:	4602      	mov	r2, r0
 80017d2:	b100      	cbz	r0, 80017d6 <main+0x292>
 80017d4:	e7fe      	b.n	80017d4 <main+0x290>
  sConfigOC.Pulse = 0;
 80017d6:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017da:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017de:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017e0:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e2:	a908      	add	r1, sp, #32
 80017e4:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e6:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e8:	f7ff fae4 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	b100      	cbz	r0, 80017f0 <main+0x2ac>
 80017ee:	e7fe      	b.n	80017ee <main+0x2aa>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017f0:	2208      	movs	r2, #8
 80017f2:	a908      	add	r1, sp, #32
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff fadd 	bl	8000db4 <HAL_TIM_PWM_ConfigChannel>
 80017fa:	b100      	cbz	r0, 80017fe <main+0x2ba>
 80017fc:	e7fe      	b.n	80017fc <main+0x2b8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017fe:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001800:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001802:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8001804:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001806:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800180c:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800180e:	a90f      	add	r1, sp, #60	; 0x3c
 8001810:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001812:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001814:	f7ff fb78 	bl	8000f08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001818:	4605      	mov	r5, r0
 800181a:	b100      	cbz	r0, 800181e <main+0x2da>
 800181c:	e7fe      	b.n	800181c <main+0x2d8>
  HAL_TIM_MspPostInit(&htim1);
 800181e:	4620      	mov	r0, r4
 8001820:	f000 fc2e 	bl	8002080 <HAL_TIM_MspPostInit>
  huart4.Instance = UART4;
 8001824:	4808      	ldr	r0, [pc, #32]	; (8001848 <main+0x304>)
  huart4.Init.BaudRate = 9600;
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <main+0x308>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001828:	6085      	str	r5, [r0, #8]
  huart4.Init.BaudRate = 9600;
 800182a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800182e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001832:	230c      	movs	r3, #12
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001834:	60c5      	str	r5, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001836:	6105      	str	r5, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001838:	6143      	str	r3, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	6185      	str	r5, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800183e:	f7ff fcab 	bl	8001198 <HAL_UART_Init>
 8001842:	b128      	cbz	r0, 8001850 <main+0x30c>
 8001844:	e7fe      	b.n	8001844 <main+0x300>
 8001846:	bf00      	nop
 8001848:	2000034c 	.word	0x2000034c
 800184c:	40004c00 	.word	0x40004c00
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001850:	210c      	movs	r1, #12
 8001852:	48c6      	ldr	r0, [pc, #792]	; (8001b6c <main+0x628>)
if(k==0 && m==0)
 8001854:	f8df 9354 	ldr.w	r9, [pc, #852]	; 8001bac <main+0x668>
 8001858:	4cc5      	ldr	r4, [pc, #788]	; (8001b70 <main+0x62c>)
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800185a:	f7ff fb19 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800185e:	2108      	movs	r1, #8
 8001860:	48c2      	ldr	r0, [pc, #776]	; (8001b6c <main+0x628>)
 8001862:	f7ff fb15 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001866:	2104      	movs	r1, #4
 8001868:	48c0      	ldr	r0, [pc, #768]	; (8001b6c <main+0x628>)
 800186a:	f7ff fb11 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800186e:	2100      	movs	r1, #0
 8001870:	48be      	ldr	r0, [pc, #760]	; (8001b6c <main+0x628>)
 8001872:	f7ff fb0d 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001876:	210c      	movs	r1, #12
 8001878:	48be      	ldr	r0, [pc, #760]	; (8001b74 <main+0x630>)
 800187a:	f7ff fb09 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800187e:	2108      	movs	r1, #8
 8001880:	48bc      	ldr	r0, [pc, #752]	; (8001b74 <main+0x630>)
 8001882:	f7ff fb05 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001886:	2104      	movs	r1, #4
 8001888:	48ba      	ldr	r0, [pc, #744]	; (8001b74 <main+0x630>)
 800188a:	f7ff fb01 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800188e:	2100      	movs	r1, #0
 8001890:	48b8      	ldr	r0, [pc, #736]	; (8001b74 <main+0x630>)
 8001892:	f7ff fafd 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001896:	210c      	movs	r1, #12
 8001898:	48b7      	ldr	r0, [pc, #732]	; (8001b78 <main+0x634>)
 800189a:	f7ff faf9 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800189e:	2108      	movs	r1, #8
 80018a0:	48b5      	ldr	r0, [pc, #724]	; (8001b78 <main+0x634>)
 80018a2:	f7ff faf5 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018a6:	2104      	movs	r1, #4
 80018a8:	48b3      	ldr	r0, [pc, #716]	; (8001b78 <main+0x634>)
 80018aa:	f7ff faf1 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018ae:	2100      	movs	r1, #0
 80018b0:	48b1      	ldr	r0, [pc, #708]	; (8001b78 <main+0x634>)
 80018b2:	f7ff faed 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80018b6:	210c      	movs	r1, #12
 80018b8:	48b0      	ldr	r0, [pc, #704]	; (8001b7c <main+0x638>)
 80018ba:	f7ff fae9 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80018be:	2108      	movs	r1, #8
 80018c0:	48ae      	ldr	r0, [pc, #696]	; (8001b7c <main+0x638>)
 80018c2:	f7ff fae5 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80018c6:	2104      	movs	r1, #4
 80018c8:	48ac      	ldr	r0, [pc, #688]	; (8001b7c <main+0x638>)
 80018ca:	f7ff fae1 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018ce:	2100      	movs	r1, #0
 80018d0:	48aa      	ldr	r0, [pc, #680]	; (8001b7c <main+0x638>)
 80018d2:	f7ff fadd 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018d6:	2108      	movs	r1, #8
 80018d8:	48a9      	ldr	r0, [pc, #676]	; (8001b80 <main+0x63c>)
 80018da:	f7ff fad9 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018de:	2100      	movs	r1, #0
 80018e0:	48a7      	ldr	r0, [pc, #668]	; (8001b80 <main+0x63c>)
 80018e2:	f7ff fad5 	bl	8000e90 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart4, &Received, 1);
 80018e6:	2201      	movs	r2, #1
 80018e8:	49a6      	ldr	r1, [pc, #664]	; (8001b84 <main+0x640>)
 80018ea:	48a7      	ldr	r0, [pc, #668]	; (8001b88 <main+0x644>)
 80018ec:	f7ff fca1 	bl	8001232 <HAL_UART_Receive_IT>
 80018f0:	464d      	mov	r5, r9
if(k==0 && m==0)
 80018f2:	f8d9 3000 	ldr.w	r3, [r9]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d143      	bne.n	8001982 <main+0x43e>
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d140      	bne.n	8001982 <main+0x43e>
  TIM5->CCR3 = 1545-G;
 8001900:	4ba2      	ldr	r3, [pc, #648]	; (8001b8c <main+0x648>)
  TIM5->CCR4 = 1300;
 8001902:	49a3      	ldr	r1, [pc, #652]	; (8001b90 <main+0x64c>)
  TIM5->CCR3 = 1545-G;
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f5c3 60c1 	rsb	r0, r3, #1544	; 0x608
  TIM5->CCR4 = 1300;
 800190a:	f240 5214 	movw	r2, #1300	; 0x514
  TIM5->CCR3 = 1545-G;
 800190e:	3001      	adds	r0, #1
  TIM5->CCR4 = 1300;
 8001910:	640a      	str	r2, [r1, #64]	; 0x40
  TIM5->CCR3 = 1545-G;
 8001912:	63c8      	str	r0, [r1, #60]	; 0x3c
  TIM5->CCR2 = 1325-G;
 8001914:	f5c3 60a5 	rsb	r0, r3, #1320	; 0x528
 8001918:	3005      	adds	r0, #5
 800191a:	6388      	str	r0, [r1, #56]	; 0x38
  TIM5->CCR1 = 1500;
 800191c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001920:	6348      	str	r0, [r1, #52]	; 0x34
  TIM4->CCR4 = 1300-G;
 8001922:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8001926:	1ad2      	subs	r2, r2, r3
 8001928:	640a      	str	r2, [r1, #64]	; 0x40
  TIM4->CCR3 = 1300-G;
 800192a:	63ca      	str	r2, [r1, #60]	; 0x3c
  TIM4->CCR2 = 1600;
 800192c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001930:	638a      	str	r2, [r1, #56]	; 0x38
  TIM4->CCR1 = 1250-G;
 8001932:	f5c3 629c 	rsb	r2, r3, #1248	; 0x4e0
 8001936:	3202      	adds	r2, #2
 8001938:	634a      	str	r2, [r1, #52]	; 0x34
  TIM3->CCR4 = 1180-G;
 800193a:	4a96      	ldr	r2, [pc, #600]	; (8001b94 <main+0x650>)
 800193c:	f5c3 6193 	rsb	r1, r3, #1176	; 0x498
 8001940:	3104      	adds	r1, #4
 8001942:	6411      	str	r1, [r2, #64]	; 0x40
  TIM3->CCR2 = 1670+G;
 8001944:	f203 6686 	addw	r6, r3, #1670	; 0x686
  TIM3->CCR3 = 1550+G;
 8001948:	f203 610e 	addw	r1, r3, #1550	; 0x60e
 800194c:	63d1      	str	r1, [r2, #60]	; 0x3c
  TIM3->CCR2 = 1670+G;
 800194e:	6396      	str	r6, [r2, #56]	; 0x38
  TIM3->CCR1 = 1350;
 8001950:	f240 5646 	movw	r6, #1350	; 0x546
 8001954:	6356      	str	r6, [r2, #52]	; 0x34
  TIM2->CCR4 = 1500+G;
 8001956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195a:	181e      	adds	r6, r3, r0
 800195c:	6416      	str	r6, [r2, #64]	; 0x40
  TIM2->CCR3 = 1600+G;
 800195e:	f503 66c8 	add.w	r6, r3, #1600	; 0x640
 8001962:	63d6      	str	r6, [r2, #60]	; 0x3c
  TIM2->CCR2 = 1500;
 8001964:	6390      	str	r0, [r2, #56]	; 0x38
  TIM2->CCR1 = 1550+G;
 8001966:	6351      	str	r1, [r2, #52]	; 0x34
  TIM1->CCR3 = 1475+G;
 8001968:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800196c:	f203 53c3 	addw	r3, r3, #1475	; 0x5c3
 8001970:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM1->CCR1 = 1550;
 8001972:	f240 630e 	movw	r3, #1550	; 0x60e
 8001976:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_Delay(P+100);
 8001978:	4b87      	ldr	r3, [pc, #540]	; (8001b98 <main+0x654>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	3064      	adds	r0, #100	; 0x64
 800197e:	f7fe fcb3 	bl	80002e8 <HAL_Delay>
if(k==0 && m==1)
 8001982:	682b      	ldr	r3, [r5, #0]
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 8082 	bne.w	8001a90 <main+0x54c>
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d17e      	bne.n	8001a90 <main+0x54c>
	TIM2->CCR3 = 1900+G+W;
 8001992:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8001b8c <main+0x648>
 8001996:	4b81      	ldr	r3, [pc, #516]	; (8001b9c <main+0x658>)
 8001998:	f8d8 1000 	ldr.w	r1, [r8]
 800199c:	681e      	ldr	r6, [r3, #0]
	TIM4->CCR1 = 950-G-W;
 800199e:	4f80      	ldr	r7, [pc, #512]	; (8001ba0 <main+0x65c>)
	TIM5->CCR3 = 1195-G-W;
 80019a0:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8001b90 <main+0x64c>
	TIM2->CCR3 = 1900+G+W;
 80019a4:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 80019a8:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80019ac:	4430      	add	r0, r6
 80019ae:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
	TIM5->CCR3 = 1195-G-W;
 80019b2:	f5c1 6095 	rsb	r0, r1, #1192	; 0x4a8
	TIM4->CCR1 = 950-G-W;
 80019b6:	f5c1 716d 	rsb	r1, r1, #948	; 0x3b4
	TIM5->CCR3 = 1195-G-W;
 80019ba:	3003      	adds	r0, #3
	TIM4->CCR1 = 950-G-W;
 80019bc:	3102      	adds	r1, #2
 80019be:	1b89      	subs	r1, r1, r6
	TIM5->CCR3 = 1195-G-W;
 80019c0:	1b80      	subs	r0, r0, r6
	HAL_Delay(P);
 80019c2:	4e75      	ldr	r6, [pc, #468]	; (8001b98 <main+0x654>)
	TIM5->CCR3 = 1195-G-W;
 80019c4:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	TIM4->CCR1 = 950-G-W;
 80019c8:	6379      	str	r1, [r7, #52]	; 0x34
	HAL_Delay(P);
 80019ca:	6830      	ldr	r0, [r6, #0]
 80019cc:	f7fe fc8c 	bl	80002e8 <HAL_Delay>
	TIM2->CCR2 = 1100-S;
 80019d0:	4974      	ldr	r1, [pc, #464]	; (8001ba4 <main+0x660>)
 80019d2:	9101      	str	r1, [sp, #4]
 80019d4:	6808      	ldr	r0, [r1, #0]
 80019d6:	f5c0 6389 	rsb	r3, r0, #1096	; 0x448
 80019da:	3304      	adds	r3, #4
 80019dc:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
	TIM5->CCR4 = 1600+S;
 80019e0:	f500 63c8 	add.w	r3, r0, #1600	; 0x640
	TIM4->CCR2 = 1900+S;
 80019e4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
	TIM5->CCR4 = 1600+S;
 80019e8:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
	TIM4->CCR2 = 1900+S;
 80019ec:	63b8      	str	r0, [r7, #56]	; 0x38
	HAL_Delay(P);
 80019ee:	6830      	ldr	r0, [r6, #0]
 80019f0:	f7fe fc7a 	bl	80002e8 <HAL_Delay>
	TIM2->CCR3 = 1600+G;
 80019f4:	f8d8 0000 	ldr.w	r0, [r8]
 80019f8:	f500 63c8 	add.w	r3, r0, #1600	; 0x640
	TIM5->CCR3 = 1545-G;
 80019fc:	f5c0 62c1 	rsb	r2, r0, #1544	; 0x608
	TIM4->CCR1 = 1250-G;
 8001a00:	f5c0 609c 	rsb	r0, r0, #1248	; 0x4e0
	TIM5->CCR3 = 1545-G;
 8001a04:	3201      	adds	r2, #1
	TIM4->CCR1 = 1250-G;
 8001a06:	3002      	adds	r0, #2
	TIM2->CCR3 = 1600+G;
 8001a08:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
	TIM5->CCR3 = 1545-G;
 8001a0c:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
	TIM4->CCR1 = 1250-G;
 8001a10:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_Delay(P);
 8001a12:	6830      	ldr	r0, [r6, #0]
 8001a14:	f7fe fc68 	bl	80002e8 <HAL_Delay>
	TIM1->CCR3 = 1825+G+W;
 8001a18:	4b60      	ldr	r3, [pc, #384]	; (8001b9c <main+0x658>)
 8001a1a:	f8d8 0000 	ldr.w	r0, [r8]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4961      	ldr	r1, [pc, #388]	; (8001ba8 <main+0x664>)
	TIM3->CCR2 = 1920+G+W;
 8001a22:	f500 6cf0 	add.w	ip, r0, #1920	; 0x780
	TIM1->CCR3 = 1825+G+W;
 8001a26:	f200 7321 	addw	r3, r0, #1825	; 0x721
	TIM4->CCR4 = 1050-G-W;
 8001a2a:	f5c0 6083 	rsb	r0, r0, #1048	; 0x418
	TIM1->CCR3 = 1825+G+W;
 8001a2e:	4413      	add	r3, r2
	TIM4->CCR4 = 1050-G-W;
 8001a30:	3002      	adds	r0, #2
	TIM1->CCR3 = 1825+G+W;
 8001a32:	63cb      	str	r3, [r1, #60]	; 0x3c
	TIM4->CCR4 = 1050-G-W;
 8001a34:	1a80      	subs	r0, r0, r2
	TIM3->CCR2 = 1920+G+W;
 8001a36:	eb0c 0302 	add.w	r3, ip, r2
 8001a3a:	f8cb 3438 	str.w	r3, [fp, #1080]	; 0x438
	TIM4->CCR4 = 1050-G-W;
 8001a3e:	6438      	str	r0, [r7, #64]	; 0x40
	HAL_Delay(P);
 8001a40:	6830      	ldr	r0, [r6, #0]
 8001a42:	f7fe fc51 	bl	80002e8 <HAL_Delay>
	TIM1->CCR1 = 1200-S;
 8001a46:	9901      	ldr	r1, [sp, #4]
 8001a48:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <main+0x664>)
 8001a4a:	6809      	ldr	r1, [r1, #0]
 8001a4c:	f5c1 6096 	rsb	r0, r1, #1200	; 0x4b0
 8001a50:	6358      	str	r0, [r3, #52]	; 0x34
	TIM3->CCR1 = 1000-S;
 8001a52:	f5c1 707a 	rsb	r0, r1, #1000	; 0x3e8
	TIM5->CCR1 = 1850+S;
 8001a56:	f201 713a 	addw	r1, r1, #1850	; 0x73a
	TIM3->CCR1 = 1000-S;
 8001a5a:	f8cb 0434 	str.w	r0, [fp, #1076]	; 0x434
	TIM5->CCR1 = 1850+S;
 8001a5e:	f8ca 1034 	str.w	r1, [sl, #52]	; 0x34
	HAL_Delay(P);
 8001a62:	6830      	ldr	r0, [r6, #0]
 8001a64:	f7fe fc40 	bl	80002e8 <HAL_Delay>
	TIM1->CCR3 = 1475+G;
 8001a68:	f8d8 1000 	ldr.w	r1, [r8]
 8001a6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ba8 <main+0x664>)
 8001a6e:	f201 50c3 	addw	r0, r1, #1475	; 0x5c3
	TIM3->CCR2 = 1670+G;
 8001a72:	f201 6286 	addw	r2, r1, #1670	; 0x686
	TIM4->CCR4 = 1350-G;
 8001a76:	f5c1 61a8 	rsb	r1, r1, #1344	; 0x540
 8001a7a:	3106      	adds	r1, #6
	TIM1->CCR3 = 1475+G;
 8001a7c:	63d8      	str	r0, [r3, #60]	; 0x3c
	TIM3->CCR2 = 1670+G;
 8001a7e:	f8cb 2438 	str.w	r2, [fp, #1080]	; 0x438
	HAL_Delay(P);
 8001a82:	6830      	ldr	r0, [r6, #0]
	TIM4->CCR4 = 1350-G;
 8001a84:	6439      	str	r1, [r7, #64]	; 0x40
	HAL_Delay(P);
 8001a86:	f7fe fc2f 	bl	80002e8 <HAL_Delay>
	k=0;
 8001a8a:	9b00      	ldr	r3, [sp, #0]
 8001a8c:	602b      	str	r3, [r5, #0]
	m=0;
 8001a8e:	6023      	str	r3, [r4, #0]
  if(k==0 && m==2)
 8001a90:	682b      	ldr	r3, [r5, #0]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 80a4 	bne.w	8001be2 <main+0x69e>
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	f040 80a0 	bne.w	8001be2 <main+0x69e>
	 TIM2->CCR3 = 1900+G+W;
 8001aa2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001b8c <main+0x648>
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <main+0x658>)
 8001aa8:	f8d8 1000 	ldr.w	r1, [r8]
 8001aac:	681e      	ldr	r6, [r3, #0]
	 TIM4->CCR1 = 950-G-W;
 8001aae:	4f3c      	ldr	r7, [pc, #240]	; (8001ba0 <main+0x65c>)
	 TIM5->CCR3 = 1195-G-W;
 8001ab0:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8001b90 <main+0x64c>
	 TIM2->CCR3 = 1900+G+W;
 8001ab4:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 8001ab8:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8001abc:	4430      	add	r0, r6
 8001abe:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
	 TIM5->CCR3 = 1195-G-W;
 8001ac2:	f5c1 6095 	rsb	r0, r1, #1192	; 0x4a8
	 TIM4->CCR1 = 950-G-W;
 8001ac6:	f5c1 716d 	rsb	r1, r1, #948	; 0x3b4
	 TIM5->CCR3 = 1195-G-W;
 8001aca:	3003      	adds	r0, #3
	 TIM4->CCR1 = 950-G-W;
 8001acc:	3102      	adds	r1, #2
 8001ace:	1b89      	subs	r1, r1, r6
	 TIM5->CCR3 = 1195-G-W;
 8001ad0:	1b80      	subs	r0, r0, r6
	 HAL_Delay(P);
 8001ad2:	4e31      	ldr	r6, [pc, #196]	; (8001b98 <main+0x654>)
	 TIM5->CCR3 = 1195-G-W;
 8001ad4:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	 TIM4->CCR1 = 950-G-W;
 8001ad8:	6379      	str	r1, [r7, #52]	; 0x34
	 HAL_Delay(P);
 8001ada:	6830      	ldr	r0, [r6, #0]
 8001adc:	f7fe fc04 	bl	80002e8 <HAL_Delay>
	 TIM2->CCR2 = 1900+S;
 8001ae0:	4930      	ldr	r1, [pc, #192]	; (8001ba4 <main+0x660>)
 8001ae2:	9101      	str	r1, [sp, #4]
 8001ae4:	6808      	ldr	r0, [r1, #0]
 8001ae6:	f200 736c 	addw	r3, r0, #1900	; 0x76c
	 TIM5->CCR4 = 1600+S;
 8001aea:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
	 TIM2->CCR2 = 1900+S;
 8001aee:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
	 TIM5->CCR4 = 1600+S;
 8001af2:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
	 TIM4->CCR2 = 1900+S;
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
	 HAL_Delay(P);
 8001af8:	6830      	ldr	r0, [r6, #0]
 8001afa:	f7fe fbf5 	bl	80002e8 <HAL_Delay>
	 TIM2->CCR3 = 1600+G;
 8001afe:	f8d8 0000 	ldr.w	r0, [r8]
 8001b02:	f500 63c8 	add.w	r3, r0, #1600	; 0x640
	 TIM5->CCR3 = 1545-G;
 8001b06:	f5c0 62c1 	rsb	r2, r0, #1544	; 0x608
	 TIM4->CCR1 = 1250-G;
 8001b0a:	f5c0 609c 	rsb	r0, r0, #1248	; 0x4e0
	 TIM5->CCR3 = 1545-G;
 8001b0e:	3201      	adds	r2, #1
	 TIM4->CCR1 = 1250-G;
 8001b10:	3002      	adds	r0, #2
	 TIM2->CCR3 = 1600+G;
 8001b12:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
	 TIM5->CCR3 = 1545-G;
 8001b16:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
	 TIM4->CCR1 = 1250-G;
 8001b1a:	6378      	str	r0, [r7, #52]	; 0x34
	 HAL_Delay(P);
 8001b1c:	6830      	ldr	r0, [r6, #0]
 8001b1e:	f7fe fbe3 	bl	80002e8 <HAL_Delay>
	 TIM1->CCR3 = 1825+G+W;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <main+0x658>)
 8001b24:	f8d8 0000 	ldr.w	r0, [r8]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	491f      	ldr	r1, [pc, #124]	; (8001ba8 <main+0x664>)
	 TIM3->CCR2 = 1920+G+W;
 8001b2c:	f500 6cf0 	add.w	ip, r0, #1920	; 0x780
	 TIM1->CCR3 = 1825+G+W;
 8001b30:	f200 7321 	addw	r3, r0, #1825	; 0x721
	 TIM4->CCR4 = 1050-G-W;
 8001b34:	f5c0 6083 	rsb	r0, r0, #1048	; 0x418
	 TIM1->CCR3 = 1825+G+W;
 8001b38:	4413      	add	r3, r2
	 TIM4->CCR4 = 1050-G-W;
 8001b3a:	3002      	adds	r0, #2
	 TIM1->CCR3 = 1825+G+W;
 8001b3c:	63cb      	str	r3, [r1, #60]	; 0x3c
	 TIM4->CCR4 = 1050-G-W;
 8001b3e:	1a80      	subs	r0, r0, r2
	 TIM3->CCR2 = 1920+G+W;
 8001b40:	eb0c 0302 	add.w	r3, ip, r2
 8001b44:	f8cb 3438 	str.w	r3, [fp, #1080]	; 0x438
	 TIM4->CCR4 = 1050-G-W;
 8001b48:	6438      	str	r0, [r7, #64]	; 0x40
	 HAL_Delay(P);
 8001b4a:	6830      	ldr	r0, [r6, #0]
 8001b4c:	f7fe fbcc 	bl	80002e8 <HAL_Delay>
	 TIM1->CCR1 = 2000+S;
 8001b50:	9901      	ldr	r1, [sp, #4]
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <main+0x664>)
 8001b54:	6809      	ldr	r1, [r1, #0]
 8001b56:	f501 60fa 	add.w	r0, r1, #2000	; 0x7d0
 8001b5a:	6358      	str	r0, [r3, #52]	; 0x34
	 TIM3->CCR1 = 1700+S;
 8001b5c:	f201 60a4 	addw	r0, r1, #1700	; 0x6a4
	 TIM5->CCR1 = 1850+S;
 8001b60:	f201 713a 	addw	r1, r1, #1850	; 0x73a
	 TIM3->CCR1 = 1700+S;
 8001b64:	f8cb 0434 	str.w	r0, [fp, #1076]	; 0x434
 8001b68:	e022      	b.n	8001bb0 <main+0x66c>
 8001b6a:	bf00      	nop
 8001b6c:	20000264 	.word	0x20000264
 8001b70:	20000208 	.word	0x20000208
 8001b74:	20000228 	.word	0x20000228
 8001b78:	200002a0 	.word	0x200002a0
 8001b7c:	2000038c 	.word	0x2000038c
 8001b80:	20000310 	.word	0x20000310
 8001b84:	20000224 	.word	0x20000224
 8001b88:	2000034c 	.word	0x2000034c
 8001b8c:	200001f8 	.word	0x200001f8
 8001b90:	40000c00 	.word	0x40000c00
 8001b94:	40000400 	.word	0x40000400
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	20000200 	.word	0x20000200
 8001ba0:	40000800 	.word	0x40000800
 8001ba4:	200001fc 	.word	0x200001fc
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	20000204 	.word	0x20000204
	 TIM5->CCR1 = 1850+S;
 8001bb0:	f8ca 1034 	str.w	r1, [sl, #52]	; 0x34
	 HAL_Delay(P);
 8001bb4:	6830      	ldr	r0, [r6, #0]
 8001bb6:	f7fe fb97 	bl	80002e8 <HAL_Delay>
	 TIM1->CCR3 = 1475+G;
 8001bba:	f8d8 1000 	ldr.w	r1, [r8]
 8001bbe:	4bae      	ldr	r3, [pc, #696]	; (8001e78 <main+0x934>)
 8001bc0:	f201 50c3 	addw	r0, r1, #1475	; 0x5c3
	 TIM3->CCR2 = 1670+G;
 8001bc4:	f201 6286 	addw	r2, r1, #1670	; 0x686
	 TIM4->CCR4 = 1350-G;
 8001bc8:	f5c1 61a8 	rsb	r1, r1, #1344	; 0x540
 8001bcc:	3106      	adds	r1, #6
	 TIM1->CCR3 = 1475+G;
 8001bce:	63d8      	str	r0, [r3, #60]	; 0x3c
	 TIM3->CCR2 = 1670+G;
 8001bd0:	f8cb 2438 	str.w	r2, [fp, #1080]	; 0x438
	 HAL_Delay(P);
 8001bd4:	6830      	ldr	r0, [r6, #0]
	 TIM4->CCR4 = 1350-G;
 8001bd6:	6439      	str	r1, [r7, #64]	; 0x40
	 HAL_Delay(P);
 8001bd8:	f7fe fb86 	bl	80002e8 <HAL_Delay>
	 k=0;
 8001bdc:	9b00      	ldr	r3, [sp, #0]
 8001bde:	602b      	str	r3, [r5, #0]
	 m=0;
 8001be0:	6023      	str	r3, [r4, #0]
  if(k==0 && m==3)
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 8085 	bne.w	8001cf6 <main+0x7b2>
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	f040 8081 	bne.w	8001cf6 <main+0x7b2>
	 TIM2->CCR3 = 1900+G+W;
 8001bf4:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8001e9c <main+0x958>
 8001bf8:	4ba0      	ldr	r3, [pc, #640]	; (8001e7c <main+0x938>)
 8001bfa:	f8d8 1000 	ldr.w	r1, [r8]
 8001bfe:	681e      	ldr	r6, [r3, #0]
	 TIM4->CCR1 = 950-G-W;
 8001c00:	4f9f      	ldr	r7, [pc, #636]	; (8001e80 <main+0x93c>)
	 TIM5->CCR3 = 1195-G-W;
 8001c02:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8001ea8 <main+0x964>
	 TIM2->CCR3 = 1900+G+W;
 8001c06:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 8001c0a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8001c0e:	4430      	add	r0, r6
 8001c10:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
	 TIM5->CCR3 = 1195-G-W;
 8001c14:	f5c1 6095 	rsb	r0, r1, #1192	; 0x4a8
	 TIM4->CCR1 = 950-G-W;
 8001c18:	f5c1 716d 	rsb	r1, r1, #948	; 0x3b4
	 TIM5->CCR3 = 1195-G-W;
 8001c1c:	3003      	adds	r0, #3
	 TIM4->CCR1 = 950-G-W;
 8001c1e:	3102      	adds	r1, #2
 8001c20:	1b89      	subs	r1, r1, r6
	 TIM5->CCR3 = 1195-G-W;
 8001c22:	1b80      	subs	r0, r0, r6
	 HAL_Delay(P);
 8001c24:	4e97      	ldr	r6, [pc, #604]	; (8001e84 <main+0x940>)
	 TIM5->CCR3 = 1195-G-W;
 8001c26:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	 TIM4->CCR1 = 950-G-W;
 8001c2a:	6379      	str	r1, [r7, #52]	; 0x34
	 HAL_Delay(P);
 8001c2c:	6830      	ldr	r0, [r6, #0]
 8001c2e:	f7fe fb5b 	bl	80002e8 <HAL_Delay>
	 TIM2->CCR2 = 1100-S;
 8001c32:	4995      	ldr	r1, [pc, #596]	; (8001e88 <main+0x944>)
 8001c34:	9101      	str	r1, [sp, #4]
 8001c36:	6808      	ldr	r0, [r1, #0]
 8001c38:	f5c0 6389 	rsb	r3, r0, #1096	; 0x448
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
	 TIM5->CCR4 = 1000-S;
 8001c42:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
	 TIM4->CCR2 = 1300-S;
 8001c46:	f5c0 60a2 	rsb	r0, r0, #1296	; 0x510
 8001c4a:	3004      	adds	r0, #4
	 TIM5->CCR4 = 1000-S;
 8001c4c:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
	 TIM4->CCR2 = 1300-S;
 8001c50:	63b8      	str	r0, [r7, #56]	; 0x38
	 HAL_Delay(P);
 8001c52:	6830      	ldr	r0, [r6, #0]
 8001c54:	f7fe fb48 	bl	80002e8 <HAL_Delay>
	 TIM2->CCR3 = 1600+G;
 8001c58:	f8d8 0000 	ldr.w	r0, [r8]
 8001c5c:	f500 63c8 	add.w	r3, r0, #1600	; 0x640
	 TIM5->CCR3 = 1545-G;
 8001c60:	f5c0 62c1 	rsb	r2, r0, #1544	; 0x608
	 TIM4->CCR1 = 1250-G;
 8001c64:	f5c0 609c 	rsb	r0, r0, #1248	; 0x4e0
	 TIM5->CCR3 = 1545-G;
 8001c68:	3201      	adds	r2, #1
	 TIM4->CCR1 = 1250-G;
 8001c6a:	3002      	adds	r0, #2
	 TIM2->CCR3 = 1600+G;
 8001c6c:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
	 TIM5->CCR3 = 1545-G;
 8001c70:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
	 TIM4->CCR1 = 1250-G;
 8001c74:	6378      	str	r0, [r7, #52]	; 0x34
	 HAL_Delay(P);
 8001c76:	6830      	ldr	r0, [r6, #0]
 8001c78:	f7fe fb36 	bl	80002e8 <HAL_Delay>
	 TIM1->CCR3 = 1825+G+W;
 8001c7c:	4b7f      	ldr	r3, [pc, #508]	; (8001e7c <main+0x938>)
 8001c7e:	f8d8 0000 	ldr.w	r0, [r8]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	497c      	ldr	r1, [pc, #496]	; (8001e78 <main+0x934>)
	 TIM3->CCR2 = 1920+G+W;
 8001c86:	f500 6cf0 	add.w	ip, r0, #1920	; 0x780
	 TIM1->CCR3 = 1825+G+W;
 8001c8a:	f200 7321 	addw	r3, r0, #1825	; 0x721
	 TIM4->CCR4 = 1050-G-W;
 8001c8e:	f5c0 6083 	rsb	r0, r0, #1048	; 0x418
	 TIM1->CCR3 = 1825+G+W;
 8001c92:	4413      	add	r3, r2
	 TIM4->CCR4 = 1050-G-W;
 8001c94:	3002      	adds	r0, #2
	 TIM1->CCR3 = 1825+G+W;
 8001c96:	63cb      	str	r3, [r1, #60]	; 0x3c
	 TIM4->CCR4 = 1050-G-W;
 8001c98:	1a80      	subs	r0, r0, r2
	 TIM3->CCR2 = 1920+G+W;
 8001c9a:	eb0c 0302 	add.w	r3, ip, r2
 8001c9e:	f8cb 3438 	str.w	r3, [fp, #1080]	; 0x438
	 TIM4->CCR4 = 1050-G-W;
 8001ca2:	6438      	str	r0, [r7, #64]	; 0x40
	 HAL_Delay(P);
 8001ca4:	6830      	ldr	r0, [r6, #0]
 8001ca6:	f7fe fb1f 	bl	80002e8 <HAL_Delay>
	 TIM1->CCR1 = 1200-S;
 8001caa:	9901      	ldr	r1, [sp, #4]
 8001cac:	4b72      	ldr	r3, [pc, #456]	; (8001e78 <main+0x934>)
 8001cae:	6809      	ldr	r1, [r1, #0]
 8001cb0:	f5c1 6096 	rsb	r0, r1, #1200	; 0x4b0
 8001cb4:	6358      	str	r0, [r3, #52]	; 0x34
	 TIM3->CCR1 = 1000-S;
 8001cb6:	f5c1 707a 	rsb	r0, r1, #1000	; 0x3e8
	 TIM5->CCR1 = 1150-S;
 8001cba:	f5c1 618f 	rsb	r1, r1, #1144	; 0x478
 8001cbe:	3106      	adds	r1, #6
	 TIM3->CCR1 = 1000-S;
 8001cc0:	f8cb 0434 	str.w	r0, [fp, #1076]	; 0x434
	 TIM5->CCR1 = 1150-S;
 8001cc4:	f8ca 1034 	str.w	r1, [sl, #52]	; 0x34
	 HAL_Delay(P);
 8001cc8:	6830      	ldr	r0, [r6, #0]
 8001cca:	f7fe fb0d 	bl	80002e8 <HAL_Delay>
	 TIM1->CCR3 = 1475+G;
 8001cce:	f8d8 1000 	ldr.w	r1, [r8]
 8001cd2:	4b69      	ldr	r3, [pc, #420]	; (8001e78 <main+0x934>)
 8001cd4:	f201 50c3 	addw	r0, r1, #1475	; 0x5c3
	 TIM3->CCR2 = 1670+G;
 8001cd8:	f201 6286 	addw	r2, r1, #1670	; 0x686
	 TIM4->CCR4 = 1350-G;
 8001cdc:	f5c1 61a8 	rsb	r1, r1, #1344	; 0x540
 8001ce0:	3106      	adds	r1, #6
	 TIM1->CCR3 = 1475+G;
 8001ce2:	63d8      	str	r0, [r3, #60]	; 0x3c
	 TIM3->CCR2 = 1670+G;
 8001ce4:	f8cb 2438 	str.w	r2, [fp, #1080]	; 0x438
	 HAL_Delay(P);
 8001ce8:	6830      	ldr	r0, [r6, #0]
	 TIM4->CCR4 = 1350-G;
 8001cea:	6439      	str	r1, [r7, #64]	; 0x40
	 HAL_Delay(P);
 8001cec:	f7fe fafc 	bl	80002e8 <HAL_Delay>
	 k=0;
 8001cf0:	9b00      	ldr	r3, [sp, #0]
 8001cf2:	602b      	str	r3, [r5, #0]
	 m=0;
 8001cf4:	6023      	str	r3, [r4, #0]
  if(k==0 && m==4)
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	b9c3      	cbnz	r3, 8001d2c <main+0x7e8>
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d115      	bne.n	8001d2c <main+0x7e8>
	  if(P>=100)
 8001d00:	4b60      	ldr	r3, [pc, #384]	; (8001e84 <main+0x940>)
	  size = sprintf(data, "%d.\n\r", P);
 8001d02:	4962      	ldr	r1, [pc, #392]	; (8001e8c <main+0x948>)
	  if(P>=100)
 8001d04:	681a      	ldr	r2, [r3, #0]
	  size = sprintf(data, "%d.\n\r", P);
 8001d06:	4862      	ldr	r0, [pc, #392]	; (8001e90 <main+0x94c>)
	  if(P>=100)
 8001d08:	2a63      	cmp	r2, #99	; 0x63
		  P=P-5;
 8001d0a:	bfcc      	ite	gt
 8001d0c:	3a05      	subgt	r2, #5
		  P=100;
 8001d0e:	2264      	movle	r2, #100	; 0x64
 8001d10:	601a      	str	r2, [r3, #0]
	  size = sprintf(data, "%d.\n\r", P);
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f000 fade 	bl	80022d4 <siprintf>
 8001d18:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <main+0x950>)
	  HAL_UART_Transmit_IT(&huart4, data, size);
 8001d1a:	495d      	ldr	r1, [pc, #372]	; (8001e90 <main+0x94c>)
	  size = sprintf(data, "%d.\n\r", P);
 8001d1c:	b282      	uxth	r2, r0
	  HAL_UART_Transmit_IT(&huart4, data, size);
 8001d1e:	485e      	ldr	r0, [pc, #376]	; (8001e98 <main+0x954>)
	  size = sprintf(data, "%d.\n\r", P);
 8001d20:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit_IT(&huart4, data, size);
 8001d22:	f7ff fa67 	bl	80011f4 <HAL_UART_Transmit_IT>
		  k=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	602b      	str	r3, [r5, #0]
		  m=0;
 8001d2a:	6023      	str	r3, [r4, #0]
  if(k==0 && m==5)
 8001d2c:	682b      	ldr	r3, [r5, #0]
 8001d2e:	b9c3      	cbnz	r3, 8001d62 <main+0x81e>
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d115      	bne.n	8001d62 <main+0x81e>
	if(P>=100)
 8001d36:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <main+0x940>)
	size = sprintf(data, "%d.\n\r", P);
 8001d38:	4954      	ldr	r1, [pc, #336]	; (8001e8c <main+0x948>)
	if(P>=100)
 8001d3a:	681a      	ldr	r2, [r3, #0]
	size = sprintf(data, "%d.\n\r", P);
 8001d3c:	4854      	ldr	r0, [pc, #336]	; (8001e90 <main+0x94c>)
	if(P>=100)
 8001d3e:	2a63      	cmp	r2, #99	; 0x63
	P=P+5;
 8001d40:	bfcc      	ite	gt
 8001d42:	3205      	addgt	r2, #5
	P=100;
 8001d44:	2264      	movle	r2, #100	; 0x64
 8001d46:	601a      	str	r2, [r3, #0]
	size = sprintf(data, "%d.\n\r", P);
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f000 fac3 	bl	80022d4 <siprintf>
 8001d4e:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <main+0x950>)
	HAL_UART_Transmit_IT(&huart4, data, size);
 8001d50:	494f      	ldr	r1, [pc, #316]	; (8001e90 <main+0x94c>)
	size = sprintf(data, "%d.\n\r", P);
 8001d52:	b282      	uxth	r2, r0
	HAL_UART_Transmit_IT(&huart4, data, size);
 8001d54:	4850      	ldr	r0, [pc, #320]	; (8001e98 <main+0x954>)
	size = sprintf(data, "%d.\n\r", P);
 8001d56:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart4, data, size);
 8001d58:	f7ff fa4c 	bl	80011f4 <HAL_UART_Transmit_IT>
	k=0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	602b      	str	r3, [r5, #0]
	m=0;
 8001d60:	6023      	str	r3, [r4, #0]
  if(k==0 && m==6)
 8001d62:	682e      	ldr	r6, [r5, #0]
 8001d64:	b99e      	cbnz	r6, 8001d8e <main+0x84a>
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	2b06      	cmp	r3, #6
 8001d6a:	d110      	bne.n	8001d8e <main+0x84a>
	G=G-25;
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <main+0x958>)
	size = sprintf(data, "%d.\n\r", G);
 8001d6e:	4947      	ldr	r1, [pc, #284]	; (8001e8c <main+0x948>)
	G=G-25;
 8001d70:	681a      	ldr	r2, [r3, #0]
	size = sprintf(data, "%d.\n\r", G);
 8001d72:	4847      	ldr	r0, [pc, #284]	; (8001e90 <main+0x94c>)
	G=G-25;
 8001d74:	3a19      	subs	r2, #25
 8001d76:	601a      	str	r2, [r3, #0]
	size = sprintf(data, "%d.\n\r", G);
 8001d78:	f000 faac 	bl	80022d4 <siprintf>
 8001d7c:	4b45      	ldr	r3, [pc, #276]	; (8001e94 <main+0x950>)
	HAL_UART_Transmit_IT(&huart4, data, size);
 8001d7e:	4944      	ldr	r1, [pc, #272]	; (8001e90 <main+0x94c>)
	size = sprintf(data, "%d.\n\r", G);
 8001d80:	b282      	uxth	r2, r0
	HAL_UART_Transmit_IT(&huart4, data, size);
 8001d82:	4845      	ldr	r0, [pc, #276]	; (8001e98 <main+0x954>)
	size = sprintf(data, "%d.\n\r", G);
 8001d84:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart4, data, size);
 8001d86:	f7ff fa35 	bl	80011f4 <HAL_UART_Transmit_IT>
	k=0;
 8001d8a:	602e      	str	r6, [r5, #0]
	m=0;
 8001d8c:	6026      	str	r6, [r4, #0]
  if(k==0 && m==7)
 8001d8e:	682b      	ldr	r3, [r5, #0]
 8001d90:	b9cb      	cbnz	r3, 8001dc6 <main+0x882>
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d116      	bne.n	8001dc6 <main+0x882>
	G=G+25;
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <main+0x958>)
	size = sprintf(data, "%d.\n\r", G);
 8001d9a:	493c      	ldr	r1, [pc, #240]	; (8001e8c <main+0x948>)
	G=G+25;
 8001d9c:	681a      	ldr	r2, [r3, #0]
	size = sprintf(data, "%d.\n\r", G);
 8001d9e:	483c      	ldr	r0, [pc, #240]	; (8001e90 <main+0x94c>)
	G=G+25;
 8001da0:	3219      	adds	r2, #25
	if(G>=50)
 8001da2:	2a31      	cmp	r2, #49	; 0x31
	G=G+25;
 8001da4:	601a      	str	r2, [r3, #0]
	G=50;
 8001da6:	bfc4      	itt	gt
 8001da8:	2232      	movgt	r2, #50	; 0x32
 8001daa:	601a      	strgt	r2, [r3, #0]
	size = sprintf(data, "%d.\n\r", G);
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	f000 fa91 	bl	80022d4 <siprintf>
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <main+0x950>)
	HAL_UART_Transmit_IT(&huart4, data, size);
 8001db4:	4936      	ldr	r1, [pc, #216]	; (8001e90 <main+0x94c>)
	size = sprintf(data, "%d.\n\r", G);
 8001db6:	b282      	uxth	r2, r0
	HAL_UART_Transmit_IT(&huart4, data, size);
 8001db8:	4837      	ldr	r0, [pc, #220]	; (8001e98 <main+0x954>)
	size = sprintf(data, "%d.\n\r", G);
 8001dba:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart4, data, size);
 8001dbc:	f7ff fa1a 	bl	80011f4 <HAL_UART_Transmit_IT>
	k=0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	602b      	str	r3, [r5, #0]
	m=0;
 8001dc4:	6023      	str	r3, [r4, #0]
  if(k==0 && m==8)
 8001dc6:	f8d5 8000 	ldr.w	r8, [r5]
 8001dca:	f1b8 0f00 	cmp.w	r8, #0
 8001dce:	d142      	bne.n	8001e56 <main+0x912>
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d13f      	bne.n	8001e56 <main+0x912>
	TIM3->CCR2 = 1740+300;
 8001dd6:	4e32      	ldr	r6, [pc, #200]	; (8001ea0 <main+0x95c>)
	TIM3->CCR3 = 1600-A;
 8001dd8:	4f32      	ldr	r7, [pc, #200]	; (8001ea4 <main+0x960>)
	TIM3->CCR2 = 1740+300;
 8001dda:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8001dde:	63b3      	str	r3, [r6, #56]	; 0x38
	HAL_Delay(200);
 8001de0:	20c8      	movs	r0, #200	; 0xc8
 8001de2:	f7fe fa81 	bl	80002e8 <HAL_Delay>
	TIM3->CCR3 = 1600-A;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8001dec:	63f3      	str	r3, [r6, #60]	; 0x3c
	HAL_Delay(300);
 8001dee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001df2:	f7fe fa79 	bl	80002e8 <HAL_Delay>
	TIM3->CCR3 = 1600+A;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001dfc:	63f3      	str	r3, [r6, #60]	; 0x3c
	HAL_Delay(300);
 8001dfe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e02:	f7fe fa71 	bl	80002e8 <HAL_Delay>
	TIM3->CCR3 = 1600-A;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8001e0c:	63f3      	str	r3, [r6, #60]	; 0x3c
	HAL_Delay(300);
 8001e0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e12:	f7fe fa69 	bl	80002e8 <HAL_Delay>
	TIM3->CCR3 = 1600+A;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001e1c:	63f3      	str	r3, [r6, #60]	; 0x3c
	HAL_Delay(300);
 8001e1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e22:	f7fe fa61 	bl	80002e8 <HAL_Delay>
	TIM3->CCR3 = 1600-A;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8001e2c:	63f3      	str	r3, [r6, #60]	; 0x3c
	HAL_Delay(300);
 8001e2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e32:	f7fe fa59 	bl	80002e8 <HAL_Delay>
	TIM3->CCR3 = 1600+A;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001e3c:	63f3      	str	r3, [r6, #60]	; 0x3c
	HAL_Delay(300);
 8001e3e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e42:	f7fe fa51 	bl	80002e8 <HAL_Delay>
	TIM3->CCR3 = 1600-A;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8001e4c:	63f3      	str	r3, [r6, #60]	; 0x3c
	k=0;
 8001e4e:	f8c5 8000 	str.w	r8, [r5]
	m=0;
 8001e52:	f8c4 8000 	str.w	r8, [r4]
  if(k==0 && m==9)
 8001e56:	682e      	ldr	r6, [r5, #0]
 8001e58:	bb76      	cbnz	r6, 8001eb8 <main+0x974>
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	2b09      	cmp	r3, #9
 8001e5e:	d12b      	bne.n	8001eb8 <main+0x974>
 	 S=S+25;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <main+0x944>)
 	 size = sprintf(data, "%d.\n\r", S);
 8001e62:	490a      	ldr	r1, [pc, #40]	; (8001e8c <main+0x948>)
 	 S=S+25;
 8001e64:	681a      	ldr	r2, [r3, #0]
 	 size = sprintf(data, "%d.\n\r", S);
 8001e66:	480a      	ldr	r0, [pc, #40]	; (8001e90 <main+0x94c>)
 	 S=S+25;
 8001e68:	3219      	adds	r2, #25
 8001e6a:	601a      	str	r2, [r3, #0]
 	 size = sprintf(data, "%d.\n\r", S);
 8001e6c:	f000 fa32 	bl	80022d4 <siprintf>
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <main+0x950>)
 	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001e72:	4907      	ldr	r1, [pc, #28]	; (8001e90 <main+0x94c>)
 	 size = sprintf(data, "%d.\n\r", S);
 8001e74:	b282      	uxth	r2, r0
 8001e76:	e019      	b.n	8001eac <main+0x968>
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	20000200 	.word	0x20000200
 8001e80:	40000800 	.word	0x40000800
 8001e84:	20000004 	.word	0x20000004
 8001e88:	200001fc 	.word	0x200001fc
 8001e8c:	08002cc0 	.word	0x08002cc0
 8001e90:	200002dc 	.word	0x200002dc
 8001e94:	20000210 	.word	0x20000210
 8001e98:	2000034c 	.word	0x2000034c
 8001e9c:	200001f8 	.word	0x200001f8
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	40000c00 	.word	0x40000c00
 	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001eac:	4827      	ldr	r0, [pc, #156]	; (8001f4c <main+0xa08>)
 	 size = sprintf(data, "%d.\n\r", S);
 8001eae:	801a      	strh	r2, [r3, #0]
 	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001eb0:	f7ff f9a0 	bl	80011f4 <HAL_UART_Transmit_IT>
 	 k=0;
 8001eb4:	602e      	str	r6, [r5, #0]
 	 m=0;
 8001eb6:	6026      	str	r6, [r4, #0]
  if(k==1 && m==0)
 8001eb8:	682b      	ldr	r3, [r5, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d112      	bne.n	8001ee4 <main+0x9a0>
 8001ebe:	6826      	ldr	r6, [r4, #0]
 8001ec0:	b986      	cbnz	r6, 8001ee4 <main+0x9a0>
  	 S=S-25;
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <main+0xa0c>)
  	 size = sprintf(data, "%d.\n\r", S);
 8001ec4:	4923      	ldr	r1, [pc, #140]	; (8001f54 <main+0xa10>)
  	 S=S-25;
 8001ec6:	681a      	ldr	r2, [r3, #0]
  	 size = sprintf(data, "%d.\n\r", S);
 8001ec8:	4823      	ldr	r0, [pc, #140]	; (8001f58 <main+0xa14>)
  	 S=S-25;
 8001eca:	3a19      	subs	r2, #25
 8001ecc:	601a      	str	r2, [r3, #0]
  	 size = sprintf(data, "%d.\n\r", S);
 8001ece:	f000 fa01 	bl	80022d4 <siprintf>
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <main+0xa18>)
  	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001ed4:	4920      	ldr	r1, [pc, #128]	; (8001f58 <main+0xa14>)
  	 size = sprintf(data, "%d.\n\r", S);
 8001ed6:	b282      	uxth	r2, r0
  	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001ed8:	481c      	ldr	r0, [pc, #112]	; (8001f4c <main+0xa08>)
  	 size = sprintf(data, "%d.\n\r", S);
 8001eda:	801a      	strh	r2, [r3, #0]
  	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001edc:	f7ff f98a 	bl	80011f4 <HAL_UART_Transmit_IT>
  	 k=0;
 8001ee0:	602e      	str	r6, [r5, #0]
  	 m=0;
 8001ee2:	6026      	str	r6, [r4, #0]
  if(k==1 && m==1)
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d114      	bne.n	8001f14 <main+0x9d0>
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d111      	bne.n	8001f14 <main+0x9d0>
 	 W=W+25;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <main+0xa1c>)
 	 size = sprintf(data, "%d.\n\r", W);
 8001ef2:	4918      	ldr	r1, [pc, #96]	; (8001f54 <main+0xa10>)
 	 W=W+25;
 8001ef4:	681a      	ldr	r2, [r3, #0]
 	 size = sprintf(data, "%d.\n\r", W);
 8001ef6:	4818      	ldr	r0, [pc, #96]	; (8001f58 <main+0xa14>)
 	 W=W+25;
 8001ef8:	3219      	adds	r2, #25
 8001efa:	601a      	str	r2, [r3, #0]
 	 size = sprintf(data, "%d.\n\r", W);
 8001efc:	f000 f9ea 	bl	80022d4 <siprintf>
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <main+0xa18>)
 	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001f02:	4915      	ldr	r1, [pc, #84]	; (8001f58 <main+0xa14>)
 	 size = sprintf(data, "%d.\n\r", W);
 8001f04:	b282      	uxth	r2, r0
 	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001f06:	4811      	ldr	r0, [pc, #68]	; (8001f4c <main+0xa08>)
 	 size = sprintf(data, "%d.\n\r", W);
 8001f08:	801a      	strh	r2, [r3, #0]
 	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001f0a:	f7ff f973 	bl	80011f4 <HAL_UART_Transmit_IT>
 	 k=0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	602b      	str	r3, [r5, #0]
 	 m=0;
 8001f12:	6023      	str	r3, [r4, #0]
  if(k==1 && m==2)
 8001f14:	682b      	ldr	r3, [r5, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	f47f aceb 	bne.w	80018f2 <main+0x3ae>
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	f47f ace7 	bne.w	80018f2 <main+0x3ae>
  	 W=W-25;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <main+0xa1c>)
  	 size = sprintf(data, "%d.\n\r", W);
 8001f26:	490b      	ldr	r1, [pc, #44]	; (8001f54 <main+0xa10>)
  	 W=W-25;
 8001f28:	681a      	ldr	r2, [r3, #0]
  	 size = sprintf(data, "%d.\n\r", W);
 8001f2a:	480b      	ldr	r0, [pc, #44]	; (8001f58 <main+0xa14>)
  	 W=W-25;
 8001f2c:	3a19      	subs	r2, #25
 8001f2e:	601a      	str	r2, [r3, #0]
  	 size = sprintf(data, "%d.\n\r", W);
 8001f30:	f000 f9d0 	bl	80022d4 <siprintf>
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <main+0xa18>)
  	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001f36:	4908      	ldr	r1, [pc, #32]	; (8001f58 <main+0xa14>)
  	 size = sprintf(data, "%d.\n\r", W);
 8001f38:	b282      	uxth	r2, r0
  	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001f3a:	4804      	ldr	r0, [pc, #16]	; (8001f4c <main+0xa08>)
  	 size = sprintf(data, "%d.\n\r", W);
 8001f3c:	801a      	strh	r2, [r3, #0]
  	 HAL_UART_Transmit_IT(&huart4, data, size);
 8001f3e:	f7ff f959 	bl	80011f4 <HAL_UART_Transmit_IT>
  	 k=0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	602b      	str	r3, [r5, #0]
  	 m=0;
 8001f46:	6023      	str	r3, [r4, #0]
 8001f48:	e4d3      	b.n	80018f2 <main+0x3ae>
 8001f4a:	bf00      	nop
 8001f4c:	2000034c 	.word	0x2000034c
 8001f50:	200001fc 	.word	0x200001fc
 8001f54:	08002cc0 	.word	0x08002cc0
 8001f58:	200002dc 	.word	0x200002dc
 8001f5c:	20000210 	.word	0x20000210
 8001f60:	20000200 	.word	0x20000200

08001f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f66:	2003      	movs	r0, #3
 8001f68:	f7fe f9cc 	bl	8000304 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4611      	mov	r1, r2
 8001f70:	f06f 000b 	mvn.w	r0, #11
 8001f74:	f7fe f9d8 	bl	8000328 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	f06f 000a 	mvn.w	r0, #10
 8001f80:	f7fe f9d2 	bl	8000328 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	4611      	mov	r1, r2
 8001f88:	f06f 0009 	mvn.w	r0, #9
 8001f8c:	f7fe f9cc 	bl	8000328 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	4611      	mov	r1, r2
 8001f94:	f06f 0004 	mvn.w	r0, #4
 8001f98:	f7fe f9c6 	bl	8000328 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	f06f 0003 	mvn.w	r0, #3
 8001fa4:	f7fe f9c0 	bl	8000328 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4611      	mov	r1, r2
 8001fac:	f06f 0001 	mvn.w	r0, #1
 8001fb0:	f7fe f9ba 	bl	8000328 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fc0:	f7fe b9b2 	b.w	8000328 <HAL_NVIC_SetPriority>

08001fc4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8001fc4:	6803      	ldr	r3, [r0, #0]
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_TIM_PWM_MspInit+0xa8>)
 8001fc8:	4293      	cmp	r3, r2
{
 8001fca:	b086      	sub	sp, #24
  if(htim_pwm->Instance==TIM1)
 8001fcc:	d10d      	bne.n	8001fea <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_TIM_PWM_MspInit+0xac>)
 8001fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fe6:	b006      	add	sp, #24
 8001fe8:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM2)
 8001fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fee:	d10c      	bne.n	800200a <HAL_TIM_PWM_MspInit+0x46>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_TIM_PWM_MspInit+0xac>)
 8001ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	9302      	str	r3, [sp, #8]
 8002006:	9b02      	ldr	r3, [sp, #8]
 8002008:	e7ed      	b.n	8001fe6 <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM3)
 800200a:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_TIM_PWM_MspInit+0xb0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d10c      	bne.n	800202a <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	9303      	str	r3, [sp, #12]
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_TIM_PWM_MspInit+0xac>)
 8002016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002018:	f042 0202 	orr.w	r2, r2, #2
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	9303      	str	r3, [sp, #12]
 8002026:	9b03      	ldr	r3, [sp, #12]
 8002028:	e7dd      	b.n	8001fe6 <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM4)
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_TIM_PWM_MspInit+0xb4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d10c      	bne.n	800204a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	9304      	str	r3, [sp, #16]
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_TIM_PWM_MspInit+0xac>)
 8002036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002038:	f042 0204 	orr.w	r2, r2, #4
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	9304      	str	r3, [sp, #16]
 8002046:	9b04      	ldr	r3, [sp, #16]
 8002048:	e7cd      	b.n	8001fe6 <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM5)
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <HAL_TIM_PWM_MspInit+0xb8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d1ca      	bne.n	8001fe6 <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	9305      	str	r3, [sp, #20]
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_TIM_PWM_MspInit+0xac>)
 8002056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002058:	f042 0208 	orr.w	r2, r2, #8
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	9305      	str	r3, [sp, #20]
 8002066:	9b05      	ldr	r3, [sp, #20]
}
 8002068:	e7bd      	b.n	8001fe6 <HAL_TIM_PWM_MspInit+0x22>
 800206a:	bf00      	nop
 800206c:	40010000 	.word	0x40010000
 8002070:	40023800 	.word	0x40023800
 8002074:	40000400 	.word	0x40000400
 8002078:	40000800 	.word	0x40000800
 800207c:	40000c00 	.word	0x40000c00

08002080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8002082:	6803      	ldr	r3, [r0, #0]
 8002084:	4a2e      	ldr	r2, [pc, #184]	; (8002140 <HAL_TIM_MspPostInit+0xc0>)
 8002086:	4293      	cmp	r3, r2
{
 8002088:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 800208a:	d10d      	bne.n	80020a8 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = Servo1_Pin|Servo2_Pin;
 800208c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002090:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800209e:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = Servo15_Pin|Servo16_Pin|Servo17_Pin|Servo18_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	a901      	add	r1, sp, #4
 80020a4:	4827      	ldr	r0, [pc, #156]	; (8002144 <HAL_TIM_MspPostInit+0xc4>)
 80020a6:	e019      	b.n	80020dc <HAL_TIM_MspPostInit+0x5c>
  else if(htim->Instance==TIM2)
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ac:	d11a      	bne.n	80020e4 <HAL_TIM_MspPostInit+0x64>
    GPIO_InitStruct.Pin = Servo3_Pin;
 80020ae:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020b6:	2401      	movs	r4, #1
    HAL_GPIO_Init(Servo3_GPIO_Port, &GPIO_InitStruct);
 80020b8:	a901      	add	r1, sp, #4
 80020ba:	4822      	ldr	r0, [pc, #136]	; (8002144 <HAL_TIM_MspPostInit+0xc4>)
    GPIO_InitStruct.Pin = Servo3_Pin;
 80020bc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020c4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(Servo3_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f7fe f9a9 	bl	800041c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Servo5_Pin|Servo6_Pin|Servo4_Pin;
 80020ca:	f640 4308 	movw	r3, #3080	; 0xc08
 80020ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020d6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d8:	481b      	ldr	r0, [pc, #108]	; (8002148 <HAL_TIM_MspPostInit+0xc8>)
 80020da:	a901      	add	r1, sp, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f7fe f99e 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80020e0:	b007      	add	sp, #28
 80020e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(htim->Instance==TIM3)
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_TIM_MspPostInit+0xcc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10f      	bne.n	800210a <HAL_TIM_MspPostInit+0x8a>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = Servo7_Pin|Servo8_Pin;
 80020ec:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	a901      	add	r1, sp, #4
 80020f4:	4813      	ldr	r0, [pc, #76]	; (8002144 <HAL_TIM_MspPostInit+0xc4>)
    GPIO_InitStruct.Pin = Servo7_Pin|Servo8_Pin;
 80020f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020fe:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f7fe f98c 	bl	800041c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Servo9_Pin|Servo10_Pin;
 8002104:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	9402      	str	r4, [sp, #8]
 8002108:	e7e3      	b.n	80020d2 <HAL_TIM_MspPostInit+0x52>
  else if(htim->Instance==TIM4)
 800210a:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_TIM_MspPostInit+0xd0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d10a      	bne.n	8002126 <HAL_TIM_MspPostInit+0xa6>
    GPIO_InitStruct.Pin = Servo11_Pin|Servo12_Pin|Servo13_Pin|Servo14_Pin;
 8002110:	f44f 7370 	mov.w	r3, #960	; 0x3c0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = Servo11_Pin|Servo12_Pin|Servo13_Pin|Servo14_Pin;
 8002116:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002122:	9305      	str	r3, [sp, #20]
 8002124:	e7d8      	b.n	80020d8 <HAL_TIM_MspPostInit+0x58>
  else if(htim->Instance==TIM5)
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <HAL_TIM_MspPostInit+0xd4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d1d9      	bne.n	80020e0 <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Pin = Servo15_Pin|Servo16_Pin|Servo17_Pin|Servo18_Pin;
 800212c:	230f      	movs	r3, #15
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = Servo15_Pin|Servo16_Pin|Servo17_Pin|Servo18_Pin;
 8002130:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	9204      	str	r2, [sp, #16]
 800213c:	e7b0      	b.n	80020a0 <HAL_TIM_MspPostInit+0x20>
 800213e:	bf00      	nop
 8002140:	40010000 	.word	0x40010000
 8002144:	40020000 	.word	0x40020000
 8002148:	40020400 	.word	0x40020400
 800214c:	40000400 	.word	0x40000400
 8002150:	40000800 	.word	0x40000800
 8002154:	40000c00 	.word	0x40000c00

08002158 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002158:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800215a:	6802      	ldr	r2, [r0, #0]
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_UART_MspInit+0x58>)
 800215e:	429a      	cmp	r2, r3
{
 8002160:	b086      	sub	sp, #24
  if(huart->Instance==UART4)
 8002162:	d123      	bne.n	80021ac <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002164:	2400      	movs	r4, #0
 8002166:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800216a:	9400      	str	r4, [sp, #0]
 800216c:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216e:	4811      	ldr	r0, [pc, #68]	; (80021b4 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002170:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8002174:	6419      	str	r1, [r3, #64]	; 0x40
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002180:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002184:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800218a:	2301      	movs	r3, #1
 800218c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002192:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002194:	2308      	movs	r3, #8
 8002196:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002198:	f7fe f940 	bl	800041c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800219c:	2034      	movs	r0, #52	; 0x34
 800219e:	4622      	mov	r2, r4
 80021a0:	4621      	mov	r1, r4
 80021a2:	f7fe f8c1 	bl	8000328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80021a6:	2034      	movs	r0, #52	; 0x34
 80021a8:	f7fe f8f2 	bl	8000390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80021ac:	b006      	add	sp, #24
 80021ae:	bd10      	pop	{r4, pc}
 80021b0:	40004c00 	.word	0x40004c00
 80021b4:	40020800 	.word	0x40020800

080021b8 <NMI_Handler>:
 80021b8:	4770      	bx	lr

080021ba <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler>

080021bc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler>

080021be <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80021be:	e7fe      	b.n	80021be <BusFault_Handler>

080021c0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80021c0:	e7fe      	b.n	80021c0 <UsageFault_Handler>

080021c2 <SVC_Handler>:
 80021c2:	4770      	bx	lr

080021c4 <DebugMon_Handler>:
 80021c4:	4770      	bx	lr

080021c6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80021c6:	4770      	bx	lr

080021c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80021c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ca:	f7fe f87f 	bl	80002cc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80021d2:	f7fe b90c 	b.w	80003ee <HAL_SYSTICK_IRQHandler>
	...

080021d8 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021d8:	4801      	ldr	r0, [pc, #4]	; (80021e0 <UART4_IRQHandler+0x8>)
 80021da:	f7ff b889 	b.w	80012f0 <HAL_UART_IRQHandler>
 80021de:	bf00      	nop
 80021e0:	2000034c 	.word	0x2000034c

080021e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e4:	490f      	ldr	r1, [pc, #60]	; (8002224 <SystemInit+0x40>)
 80021e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <SystemInit+0x44>)
 80021f4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021f6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80021fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002206:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800220a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <SystemInit+0x48>)
 800220e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002216:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002218:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800221a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800221e:	608b      	str	r3, [r1, #8]
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00
 8002228:	40023800 	.word	0x40023800
 800222c:	24003010 	.word	0x24003010

08002230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002268 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002234:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002236:	e003      	b.n	8002240 <LoopCopyDataInit>

08002238 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800223a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800223c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800223e:	3104      	adds	r1, #4

08002240 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002244:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002246:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002248:	d3f6      	bcc.n	8002238 <CopyDataInit>
  ldr  r2, =_sbss
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800224c:	e002      	b.n	8002254 <LoopFillZerobss>

0800224e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800224e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002250:	f842 3b04 	str.w	r3, [r2], #4

08002254 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002256:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002258:	d3f9      	bcc.n	800224e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800225a:	f7ff ffc3 	bl	80021e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225e:	f000 f815 	bl	800228c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002262:	f7ff f96f 	bl	8001544 <main>
  bx  lr    
 8002266:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002268:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800226c:	08002e0c 	.word	0x08002e0c
  ldr  r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002274:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002278:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800227c:	200003cc 	.word	0x200003cc

08002280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC_IRQHandler>

08002282 <atoi>:
 8002282:	220a      	movs	r2, #10
 8002284:	2100      	movs	r1, #0
 8002286:	f000 b8c9 	b.w	800241c <strtol>
	...

0800228c <__libc_init_array>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	4e0d      	ldr	r6, [pc, #52]	; (80022c4 <__libc_init_array+0x38>)
 8002290:	4c0d      	ldr	r4, [pc, #52]	; (80022c8 <__libc_init_array+0x3c>)
 8002292:	1ba4      	subs	r4, r4, r6
 8002294:	10a4      	asrs	r4, r4, #2
 8002296:	2500      	movs	r5, #0
 8002298:	42a5      	cmp	r5, r4
 800229a:	d109      	bne.n	80022b0 <__libc_init_array+0x24>
 800229c:	4e0b      	ldr	r6, [pc, #44]	; (80022cc <__libc_init_array+0x40>)
 800229e:	4c0c      	ldr	r4, [pc, #48]	; (80022d0 <__libc_init_array+0x44>)
 80022a0:	f000 fcfa 	bl	8002c98 <_init>
 80022a4:	1ba4      	subs	r4, r4, r6
 80022a6:	10a4      	asrs	r4, r4, #2
 80022a8:	2500      	movs	r5, #0
 80022aa:	42a5      	cmp	r5, r4
 80022ac:	d105      	bne.n	80022ba <__libc_init_array+0x2e>
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022b4:	4798      	blx	r3
 80022b6:	3501      	adds	r5, #1
 80022b8:	e7ee      	b.n	8002298 <__libc_init_array+0xc>
 80022ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022be:	4798      	blx	r3
 80022c0:	3501      	adds	r5, #1
 80022c2:	e7f2      	b.n	80022aa <__libc_init_array+0x1e>
 80022c4:	08002e04 	.word	0x08002e04
 80022c8:	08002e04 	.word	0x08002e04
 80022cc:	08002e04 	.word	0x08002e04
 80022d0:	08002e08 	.word	0x08002e08

080022d4 <siprintf>:
 80022d4:	b40e      	push	{r1, r2, r3}
 80022d6:	b500      	push	{lr}
 80022d8:	b09c      	sub	sp, #112	; 0x70
 80022da:	f44f 7102 	mov.w	r1, #520	; 0x208
 80022de:	ab1d      	add	r3, sp, #116	; 0x74
 80022e0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80022e4:	9002      	str	r0, [sp, #8]
 80022e6:	9006      	str	r0, [sp, #24]
 80022e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <siprintf+0x44>)
 80022ee:	9104      	str	r1, [sp, #16]
 80022f0:	9107      	str	r1, [sp, #28]
 80022f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80022fa:	f8ad 1016 	strh.w	r1, [sp, #22]
 80022fe:	6800      	ldr	r0, [r0, #0]
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	a902      	add	r1, sp, #8
 8002304:	f000 f910 	bl	8002528 <_svfiprintf_r>
 8002308:	9b02      	ldr	r3, [sp, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	b01c      	add	sp, #112	; 0x70
 8002310:	f85d eb04 	ldr.w	lr, [sp], #4
 8002314:	b003      	add	sp, #12
 8002316:	4770      	bx	lr
 8002318:	2000000c 	.word	0x2000000c

0800231c <_strtol_l.isra.0>:
 800231c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002320:	4680      	mov	r8, r0
 8002322:	4689      	mov	r9, r1
 8002324:	4692      	mov	sl, r2
 8002326:	461f      	mov	r7, r3
 8002328:	468b      	mov	fp, r1
 800232a:	465d      	mov	r5, fp
 800232c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800232e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002332:	f000 f889 	bl	8002448 <__locale_ctype_ptr_l>
 8002336:	4420      	add	r0, r4
 8002338:	7846      	ldrb	r6, [r0, #1]
 800233a:	f016 0608 	ands.w	r6, r6, #8
 800233e:	d10b      	bne.n	8002358 <_strtol_l.isra.0+0x3c>
 8002340:	2c2d      	cmp	r4, #45	; 0x2d
 8002342:	d10b      	bne.n	800235c <_strtol_l.isra.0+0x40>
 8002344:	782c      	ldrb	r4, [r5, #0]
 8002346:	2601      	movs	r6, #1
 8002348:	f10b 0502 	add.w	r5, fp, #2
 800234c:	b167      	cbz	r7, 8002368 <_strtol_l.isra.0+0x4c>
 800234e:	2f10      	cmp	r7, #16
 8002350:	d114      	bne.n	800237c <_strtol_l.isra.0+0x60>
 8002352:	2c30      	cmp	r4, #48	; 0x30
 8002354:	d00a      	beq.n	800236c <_strtol_l.isra.0+0x50>
 8002356:	e011      	b.n	800237c <_strtol_l.isra.0+0x60>
 8002358:	46ab      	mov	fp, r5
 800235a:	e7e6      	b.n	800232a <_strtol_l.isra.0+0xe>
 800235c:	2c2b      	cmp	r4, #43	; 0x2b
 800235e:	bf04      	itt	eq
 8002360:	782c      	ldrbeq	r4, [r5, #0]
 8002362:	f10b 0502 	addeq.w	r5, fp, #2
 8002366:	e7f1      	b.n	800234c <_strtol_l.isra.0+0x30>
 8002368:	2c30      	cmp	r4, #48	; 0x30
 800236a:	d127      	bne.n	80023bc <_strtol_l.isra.0+0xa0>
 800236c:	782b      	ldrb	r3, [r5, #0]
 800236e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002372:	2b58      	cmp	r3, #88	; 0x58
 8002374:	d14b      	bne.n	800240e <_strtol_l.isra.0+0xf2>
 8002376:	786c      	ldrb	r4, [r5, #1]
 8002378:	2710      	movs	r7, #16
 800237a:	3502      	adds	r5, #2
 800237c:	2e00      	cmp	r6, #0
 800237e:	bf0c      	ite	eq
 8002380:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002384:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002388:	2200      	movs	r2, #0
 800238a:	fbb1 fef7 	udiv	lr, r1, r7
 800238e:	4610      	mov	r0, r2
 8002390:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002394:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002398:	2b09      	cmp	r3, #9
 800239a:	d811      	bhi.n	80023c0 <_strtol_l.isra.0+0xa4>
 800239c:	461c      	mov	r4, r3
 800239e:	42a7      	cmp	r7, r4
 80023a0:	dd1d      	ble.n	80023de <_strtol_l.isra.0+0xc2>
 80023a2:	1c53      	adds	r3, r2, #1
 80023a4:	d007      	beq.n	80023b6 <_strtol_l.isra.0+0x9a>
 80023a6:	4586      	cmp	lr, r0
 80023a8:	d316      	bcc.n	80023d8 <_strtol_l.isra.0+0xbc>
 80023aa:	d101      	bne.n	80023b0 <_strtol_l.isra.0+0x94>
 80023ac:	45a4      	cmp	ip, r4
 80023ae:	db13      	blt.n	80023d8 <_strtol_l.isra.0+0xbc>
 80023b0:	fb00 4007 	mla	r0, r0, r7, r4
 80023b4:	2201      	movs	r2, #1
 80023b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80023ba:	e7eb      	b.n	8002394 <_strtol_l.isra.0+0x78>
 80023bc:	270a      	movs	r7, #10
 80023be:	e7dd      	b.n	800237c <_strtol_l.isra.0+0x60>
 80023c0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80023c4:	2b19      	cmp	r3, #25
 80023c6:	d801      	bhi.n	80023cc <_strtol_l.isra.0+0xb0>
 80023c8:	3c37      	subs	r4, #55	; 0x37
 80023ca:	e7e8      	b.n	800239e <_strtol_l.isra.0+0x82>
 80023cc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80023d0:	2b19      	cmp	r3, #25
 80023d2:	d804      	bhi.n	80023de <_strtol_l.isra.0+0xc2>
 80023d4:	3c57      	subs	r4, #87	; 0x57
 80023d6:	e7e2      	b.n	800239e <_strtol_l.isra.0+0x82>
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	e7eb      	b.n	80023b6 <_strtol_l.isra.0+0x9a>
 80023de:	1c53      	adds	r3, r2, #1
 80023e0:	d108      	bne.n	80023f4 <_strtol_l.isra.0+0xd8>
 80023e2:	2322      	movs	r3, #34	; 0x22
 80023e4:	f8c8 3000 	str.w	r3, [r8]
 80023e8:	4608      	mov	r0, r1
 80023ea:	f1ba 0f00 	cmp.w	sl, #0
 80023ee:	d107      	bne.n	8002400 <_strtol_l.isra.0+0xe4>
 80023f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f4:	b106      	cbz	r6, 80023f8 <_strtol_l.isra.0+0xdc>
 80023f6:	4240      	negs	r0, r0
 80023f8:	f1ba 0f00 	cmp.w	sl, #0
 80023fc:	d00c      	beq.n	8002418 <_strtol_l.isra.0+0xfc>
 80023fe:	b122      	cbz	r2, 800240a <_strtol_l.isra.0+0xee>
 8002400:	3d01      	subs	r5, #1
 8002402:	f8ca 5000 	str.w	r5, [sl]
 8002406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800240a:	464d      	mov	r5, r9
 800240c:	e7f9      	b.n	8002402 <_strtol_l.isra.0+0xe6>
 800240e:	2430      	movs	r4, #48	; 0x30
 8002410:	2f00      	cmp	r7, #0
 8002412:	d1b3      	bne.n	800237c <_strtol_l.isra.0+0x60>
 8002414:	2708      	movs	r7, #8
 8002416:	e7b1      	b.n	800237c <_strtol_l.isra.0+0x60>
 8002418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800241c <strtol>:
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <strtol+0x24>)
 800241e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002420:	681c      	ldr	r4, [r3, #0]
 8002422:	4d08      	ldr	r5, [pc, #32]	; (8002444 <strtol+0x28>)
 8002424:	6a23      	ldr	r3, [r4, #32]
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf08      	it	eq
 800242a:	462b      	moveq	r3, r5
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	460a      	mov	r2, r1
 8002432:	4601      	mov	r1, r0
 8002434:	4620      	mov	r0, r4
 8002436:	f7ff ff71 	bl	800231c <_strtol_l.isra.0>
 800243a:	b003      	add	sp, #12
 800243c:	bd30      	pop	{r4, r5, pc}
 800243e:	bf00      	nop
 8002440:	2000000c 	.word	0x2000000c
 8002444:	20000070 	.word	0x20000070

08002448 <__locale_ctype_ptr_l>:
 8002448:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800244c:	4770      	bx	lr

0800244e <__ascii_mbtowc>:
 800244e:	b082      	sub	sp, #8
 8002450:	b901      	cbnz	r1, 8002454 <__ascii_mbtowc+0x6>
 8002452:	a901      	add	r1, sp, #4
 8002454:	b142      	cbz	r2, 8002468 <__ascii_mbtowc+0x1a>
 8002456:	b14b      	cbz	r3, 800246c <__ascii_mbtowc+0x1e>
 8002458:	7813      	ldrb	r3, [r2, #0]
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	1c10      	adds	r0, r2, #0
 8002460:	bf18      	it	ne
 8002462:	2001      	movne	r0, #1
 8002464:	b002      	add	sp, #8
 8002466:	4770      	bx	lr
 8002468:	4610      	mov	r0, r2
 800246a:	e7fb      	b.n	8002464 <__ascii_mbtowc+0x16>
 800246c:	f06f 0001 	mvn.w	r0, #1
 8002470:	e7f8      	b.n	8002464 <__ascii_mbtowc+0x16>

08002472 <__ssputs_r>:
 8002472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002476:	688e      	ldr	r6, [r1, #8]
 8002478:	429e      	cmp	r6, r3
 800247a:	4682      	mov	sl, r0
 800247c:	460c      	mov	r4, r1
 800247e:	4691      	mov	r9, r2
 8002480:	4698      	mov	r8, r3
 8002482:	d835      	bhi.n	80024f0 <__ssputs_r+0x7e>
 8002484:	898a      	ldrh	r2, [r1, #12]
 8002486:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800248a:	d031      	beq.n	80024f0 <__ssputs_r+0x7e>
 800248c:	6825      	ldr	r5, [r4, #0]
 800248e:	6909      	ldr	r1, [r1, #16]
 8002490:	1a6f      	subs	r7, r5, r1
 8002492:	6965      	ldr	r5, [r4, #20]
 8002494:	2302      	movs	r3, #2
 8002496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800249a:	fb95 f5f3 	sdiv	r5, r5, r3
 800249e:	f108 0301 	add.w	r3, r8, #1
 80024a2:	443b      	add	r3, r7
 80024a4:	429d      	cmp	r5, r3
 80024a6:	bf38      	it	cc
 80024a8:	461d      	movcc	r5, r3
 80024aa:	0553      	lsls	r3, r2, #21
 80024ac:	d531      	bpl.n	8002512 <__ssputs_r+0xa0>
 80024ae:	4629      	mov	r1, r5
 80024b0:	f000 fb44 	bl	8002b3c <_malloc_r>
 80024b4:	4606      	mov	r6, r0
 80024b6:	b950      	cbnz	r0, 80024ce <__ssputs_r+0x5c>
 80024b8:	230c      	movs	r3, #12
 80024ba:	f8ca 3000 	str.w	r3, [sl]
 80024be:	89a3      	ldrh	r3, [r4, #12]
 80024c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c4:	81a3      	strh	r3, [r4, #12]
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024ce:	463a      	mov	r2, r7
 80024d0:	6921      	ldr	r1, [r4, #16]
 80024d2:	f000 fac0 	bl	8002a56 <memcpy>
 80024d6:	89a3      	ldrh	r3, [r4, #12]
 80024d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	81a3      	strh	r3, [r4, #12]
 80024e2:	6126      	str	r6, [r4, #16]
 80024e4:	6165      	str	r5, [r4, #20]
 80024e6:	443e      	add	r6, r7
 80024e8:	1bed      	subs	r5, r5, r7
 80024ea:	6026      	str	r6, [r4, #0]
 80024ec:	60a5      	str	r5, [r4, #8]
 80024ee:	4646      	mov	r6, r8
 80024f0:	4546      	cmp	r6, r8
 80024f2:	bf28      	it	cs
 80024f4:	4646      	movcs	r6, r8
 80024f6:	4632      	mov	r2, r6
 80024f8:	4649      	mov	r1, r9
 80024fa:	6820      	ldr	r0, [r4, #0]
 80024fc:	f000 fab6 	bl	8002a6c <memmove>
 8002500:	68a3      	ldr	r3, [r4, #8]
 8002502:	1b9b      	subs	r3, r3, r6
 8002504:	60a3      	str	r3, [r4, #8]
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	441e      	add	r6, r3
 800250a:	6026      	str	r6, [r4, #0]
 800250c:	2000      	movs	r0, #0
 800250e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002512:	462a      	mov	r2, r5
 8002514:	f000 fb70 	bl	8002bf8 <_realloc_r>
 8002518:	4606      	mov	r6, r0
 800251a:	2800      	cmp	r0, #0
 800251c:	d1e1      	bne.n	80024e2 <__ssputs_r+0x70>
 800251e:	6921      	ldr	r1, [r4, #16]
 8002520:	4650      	mov	r0, sl
 8002522:	f000 fabd 	bl	8002aa0 <_free_r>
 8002526:	e7c7      	b.n	80024b8 <__ssputs_r+0x46>

08002528 <_svfiprintf_r>:
 8002528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800252c:	b09d      	sub	sp, #116	; 0x74
 800252e:	4680      	mov	r8, r0
 8002530:	9303      	str	r3, [sp, #12]
 8002532:	898b      	ldrh	r3, [r1, #12]
 8002534:	061c      	lsls	r4, r3, #24
 8002536:	460d      	mov	r5, r1
 8002538:	4616      	mov	r6, r2
 800253a:	d50f      	bpl.n	800255c <_svfiprintf_r+0x34>
 800253c:	690b      	ldr	r3, [r1, #16]
 800253e:	b96b      	cbnz	r3, 800255c <_svfiprintf_r+0x34>
 8002540:	2140      	movs	r1, #64	; 0x40
 8002542:	f000 fafb 	bl	8002b3c <_malloc_r>
 8002546:	6028      	str	r0, [r5, #0]
 8002548:	6128      	str	r0, [r5, #16]
 800254a:	b928      	cbnz	r0, 8002558 <_svfiprintf_r+0x30>
 800254c:	230c      	movs	r3, #12
 800254e:	f8c8 3000 	str.w	r3, [r8]
 8002552:	f04f 30ff 	mov.w	r0, #4294967295
 8002556:	e0c5      	b.n	80026e4 <_svfiprintf_r+0x1bc>
 8002558:	2340      	movs	r3, #64	; 0x40
 800255a:	616b      	str	r3, [r5, #20]
 800255c:	2300      	movs	r3, #0
 800255e:	9309      	str	r3, [sp, #36]	; 0x24
 8002560:	2320      	movs	r3, #32
 8002562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002566:	2330      	movs	r3, #48	; 0x30
 8002568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800256c:	f04f 0b01 	mov.w	fp, #1
 8002570:	4637      	mov	r7, r6
 8002572:	463c      	mov	r4, r7
 8002574:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d13c      	bne.n	80025f6 <_svfiprintf_r+0xce>
 800257c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002580:	d00b      	beq.n	800259a <_svfiprintf_r+0x72>
 8002582:	4653      	mov	r3, sl
 8002584:	4632      	mov	r2, r6
 8002586:	4629      	mov	r1, r5
 8002588:	4640      	mov	r0, r8
 800258a:	f7ff ff72 	bl	8002472 <__ssputs_r>
 800258e:	3001      	adds	r0, #1
 8002590:	f000 80a3 	beq.w	80026da <_svfiprintf_r+0x1b2>
 8002594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002596:	4453      	add	r3, sl
 8002598:	9309      	str	r3, [sp, #36]	; 0x24
 800259a:	783b      	ldrb	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 809c 	beq.w	80026da <_svfiprintf_r+0x1b2>
 80025a2:	2300      	movs	r3, #0
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	9304      	str	r3, [sp, #16]
 80025aa:	9307      	str	r3, [sp, #28]
 80025ac:	9205      	str	r2, [sp, #20]
 80025ae:	9306      	str	r3, [sp, #24]
 80025b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025b4:	931a      	str	r3, [sp, #104]	; 0x68
 80025b6:	2205      	movs	r2, #5
 80025b8:	7821      	ldrb	r1, [r4, #0]
 80025ba:	4850      	ldr	r0, [pc, #320]	; (80026fc <_svfiprintf_r+0x1d4>)
 80025bc:	f7fd fe08 	bl	80001d0 <memchr>
 80025c0:	1c67      	adds	r7, r4, #1
 80025c2:	9b04      	ldr	r3, [sp, #16]
 80025c4:	b9d8      	cbnz	r0, 80025fe <_svfiprintf_r+0xd6>
 80025c6:	06d9      	lsls	r1, r3, #27
 80025c8:	bf44      	itt	mi
 80025ca:	2220      	movmi	r2, #32
 80025cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025d0:	071a      	lsls	r2, r3, #28
 80025d2:	bf44      	itt	mi
 80025d4:	222b      	movmi	r2, #43	; 0x2b
 80025d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025da:	7822      	ldrb	r2, [r4, #0]
 80025dc:	2a2a      	cmp	r2, #42	; 0x2a
 80025de:	d016      	beq.n	800260e <_svfiprintf_r+0xe6>
 80025e0:	9a07      	ldr	r2, [sp, #28]
 80025e2:	2100      	movs	r1, #0
 80025e4:	200a      	movs	r0, #10
 80025e6:	4627      	mov	r7, r4
 80025e8:	3401      	adds	r4, #1
 80025ea:	783b      	ldrb	r3, [r7, #0]
 80025ec:	3b30      	subs	r3, #48	; 0x30
 80025ee:	2b09      	cmp	r3, #9
 80025f0:	d951      	bls.n	8002696 <_svfiprintf_r+0x16e>
 80025f2:	b1c9      	cbz	r1, 8002628 <_svfiprintf_r+0x100>
 80025f4:	e011      	b.n	800261a <_svfiprintf_r+0xf2>
 80025f6:	2b25      	cmp	r3, #37	; 0x25
 80025f8:	d0c0      	beq.n	800257c <_svfiprintf_r+0x54>
 80025fa:	4627      	mov	r7, r4
 80025fc:	e7b9      	b.n	8002572 <_svfiprintf_r+0x4a>
 80025fe:	4a3f      	ldr	r2, [pc, #252]	; (80026fc <_svfiprintf_r+0x1d4>)
 8002600:	1a80      	subs	r0, r0, r2
 8002602:	fa0b f000 	lsl.w	r0, fp, r0
 8002606:	4318      	orrs	r0, r3
 8002608:	9004      	str	r0, [sp, #16]
 800260a:	463c      	mov	r4, r7
 800260c:	e7d3      	b.n	80025b6 <_svfiprintf_r+0x8e>
 800260e:	9a03      	ldr	r2, [sp, #12]
 8002610:	1d11      	adds	r1, r2, #4
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	9103      	str	r1, [sp, #12]
 8002616:	2a00      	cmp	r2, #0
 8002618:	db01      	blt.n	800261e <_svfiprintf_r+0xf6>
 800261a:	9207      	str	r2, [sp, #28]
 800261c:	e004      	b.n	8002628 <_svfiprintf_r+0x100>
 800261e:	4252      	negs	r2, r2
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	9207      	str	r2, [sp, #28]
 8002626:	9304      	str	r3, [sp, #16]
 8002628:	783b      	ldrb	r3, [r7, #0]
 800262a:	2b2e      	cmp	r3, #46	; 0x2e
 800262c:	d10e      	bne.n	800264c <_svfiprintf_r+0x124>
 800262e:	787b      	ldrb	r3, [r7, #1]
 8002630:	2b2a      	cmp	r3, #42	; 0x2a
 8002632:	f107 0101 	add.w	r1, r7, #1
 8002636:	d132      	bne.n	800269e <_svfiprintf_r+0x176>
 8002638:	9b03      	ldr	r3, [sp, #12]
 800263a:	1d1a      	adds	r2, r3, #4
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	9203      	str	r2, [sp, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	bfb8      	it	lt
 8002644:	f04f 33ff 	movlt.w	r3, #4294967295
 8002648:	3702      	adds	r7, #2
 800264a:	9305      	str	r3, [sp, #20]
 800264c:	4c2c      	ldr	r4, [pc, #176]	; (8002700 <_svfiprintf_r+0x1d8>)
 800264e:	7839      	ldrb	r1, [r7, #0]
 8002650:	2203      	movs	r2, #3
 8002652:	4620      	mov	r0, r4
 8002654:	f7fd fdbc 	bl	80001d0 <memchr>
 8002658:	b138      	cbz	r0, 800266a <_svfiprintf_r+0x142>
 800265a:	2340      	movs	r3, #64	; 0x40
 800265c:	1b00      	subs	r0, r0, r4
 800265e:	fa03 f000 	lsl.w	r0, r3, r0
 8002662:	9b04      	ldr	r3, [sp, #16]
 8002664:	4303      	orrs	r3, r0
 8002666:	9304      	str	r3, [sp, #16]
 8002668:	3701      	adds	r7, #1
 800266a:	7839      	ldrb	r1, [r7, #0]
 800266c:	4825      	ldr	r0, [pc, #148]	; (8002704 <_svfiprintf_r+0x1dc>)
 800266e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002672:	2206      	movs	r2, #6
 8002674:	1c7e      	adds	r6, r7, #1
 8002676:	f7fd fdab 	bl	80001d0 <memchr>
 800267a:	2800      	cmp	r0, #0
 800267c:	d035      	beq.n	80026ea <_svfiprintf_r+0x1c2>
 800267e:	4b22      	ldr	r3, [pc, #136]	; (8002708 <_svfiprintf_r+0x1e0>)
 8002680:	b9fb      	cbnz	r3, 80026c2 <_svfiprintf_r+0x19a>
 8002682:	9b03      	ldr	r3, [sp, #12]
 8002684:	3307      	adds	r3, #7
 8002686:	f023 0307 	bic.w	r3, r3, #7
 800268a:	3308      	adds	r3, #8
 800268c:	9303      	str	r3, [sp, #12]
 800268e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002690:	444b      	add	r3, r9
 8002692:	9309      	str	r3, [sp, #36]	; 0x24
 8002694:	e76c      	b.n	8002570 <_svfiprintf_r+0x48>
 8002696:	fb00 3202 	mla	r2, r0, r2, r3
 800269a:	2101      	movs	r1, #1
 800269c:	e7a3      	b.n	80025e6 <_svfiprintf_r+0xbe>
 800269e:	2300      	movs	r3, #0
 80026a0:	9305      	str	r3, [sp, #20]
 80026a2:	4618      	mov	r0, r3
 80026a4:	240a      	movs	r4, #10
 80026a6:	460f      	mov	r7, r1
 80026a8:	3101      	adds	r1, #1
 80026aa:	783a      	ldrb	r2, [r7, #0]
 80026ac:	3a30      	subs	r2, #48	; 0x30
 80026ae:	2a09      	cmp	r2, #9
 80026b0:	d903      	bls.n	80026ba <_svfiprintf_r+0x192>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ca      	beq.n	800264c <_svfiprintf_r+0x124>
 80026b6:	9005      	str	r0, [sp, #20]
 80026b8:	e7c8      	b.n	800264c <_svfiprintf_r+0x124>
 80026ba:	fb04 2000 	mla	r0, r4, r0, r2
 80026be:	2301      	movs	r3, #1
 80026c0:	e7f1      	b.n	80026a6 <_svfiprintf_r+0x17e>
 80026c2:	ab03      	add	r3, sp, #12
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	462a      	mov	r2, r5
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <_svfiprintf_r+0x1e4>)
 80026ca:	a904      	add	r1, sp, #16
 80026cc:	4640      	mov	r0, r8
 80026ce:	f3af 8000 	nop.w
 80026d2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80026d6:	4681      	mov	r9, r0
 80026d8:	d1d9      	bne.n	800268e <_svfiprintf_r+0x166>
 80026da:	89ab      	ldrh	r3, [r5, #12]
 80026dc:	065b      	lsls	r3, r3, #25
 80026de:	f53f af38 	bmi.w	8002552 <_svfiprintf_r+0x2a>
 80026e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026e4:	b01d      	add	sp, #116	; 0x74
 80026e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ea:	ab03      	add	r3, sp, #12
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	462a      	mov	r2, r5
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <_svfiprintf_r+0x1e4>)
 80026f2:	a904      	add	r1, sp, #16
 80026f4:	4640      	mov	r0, r8
 80026f6:	f000 f881 	bl	80027fc <_printf_i>
 80026fa:	e7ea      	b.n	80026d2 <_svfiprintf_r+0x1aa>
 80026fc:	08002cd0 	.word	0x08002cd0
 8002700:	08002cd6 	.word	0x08002cd6
 8002704:	08002cda 	.word	0x08002cda
 8002708:	00000000 	.word	0x00000000
 800270c:	08002473 	.word	0x08002473

08002710 <_printf_common>:
 8002710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002714:	4691      	mov	r9, r2
 8002716:	461f      	mov	r7, r3
 8002718:	688a      	ldr	r2, [r1, #8]
 800271a:	690b      	ldr	r3, [r1, #16]
 800271c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002720:	4293      	cmp	r3, r2
 8002722:	bfb8      	it	lt
 8002724:	4613      	movlt	r3, r2
 8002726:	f8c9 3000 	str.w	r3, [r9]
 800272a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800272e:	4606      	mov	r6, r0
 8002730:	460c      	mov	r4, r1
 8002732:	b112      	cbz	r2, 800273a <_printf_common+0x2a>
 8002734:	3301      	adds	r3, #1
 8002736:	f8c9 3000 	str.w	r3, [r9]
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	0699      	lsls	r1, r3, #26
 800273e:	bf42      	ittt	mi
 8002740:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002744:	3302      	addmi	r3, #2
 8002746:	f8c9 3000 	strmi.w	r3, [r9]
 800274a:	6825      	ldr	r5, [r4, #0]
 800274c:	f015 0506 	ands.w	r5, r5, #6
 8002750:	d107      	bne.n	8002762 <_printf_common+0x52>
 8002752:	f104 0a19 	add.w	sl, r4, #25
 8002756:	68e3      	ldr	r3, [r4, #12]
 8002758:	f8d9 2000 	ldr.w	r2, [r9]
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	429d      	cmp	r5, r3
 8002760:	db29      	blt.n	80027b6 <_printf_common+0xa6>
 8002762:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	3300      	adds	r3, #0
 800276a:	bf18      	it	ne
 800276c:	2301      	movne	r3, #1
 800276e:	0692      	lsls	r2, r2, #26
 8002770:	d42e      	bmi.n	80027d0 <_printf_common+0xc0>
 8002772:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002776:	4639      	mov	r1, r7
 8002778:	4630      	mov	r0, r6
 800277a:	47c0      	blx	r8
 800277c:	3001      	adds	r0, #1
 800277e:	d021      	beq.n	80027c4 <_printf_common+0xb4>
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	68e5      	ldr	r5, [r4, #12]
 8002784:	f8d9 2000 	ldr.w	r2, [r9]
 8002788:	f003 0306 	and.w	r3, r3, #6
 800278c:	2b04      	cmp	r3, #4
 800278e:	bf08      	it	eq
 8002790:	1aad      	subeq	r5, r5, r2
 8002792:	68a3      	ldr	r3, [r4, #8]
 8002794:	6922      	ldr	r2, [r4, #16]
 8002796:	bf0c      	ite	eq
 8002798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800279c:	2500      	movne	r5, #0
 800279e:	4293      	cmp	r3, r2
 80027a0:	bfc4      	itt	gt
 80027a2:	1a9b      	subgt	r3, r3, r2
 80027a4:	18ed      	addgt	r5, r5, r3
 80027a6:	f04f 0900 	mov.w	r9, #0
 80027aa:	341a      	adds	r4, #26
 80027ac:	454d      	cmp	r5, r9
 80027ae:	d11b      	bne.n	80027e8 <_printf_common+0xd8>
 80027b0:	2000      	movs	r0, #0
 80027b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027b6:	2301      	movs	r3, #1
 80027b8:	4652      	mov	r2, sl
 80027ba:	4639      	mov	r1, r7
 80027bc:	4630      	mov	r0, r6
 80027be:	47c0      	blx	r8
 80027c0:	3001      	adds	r0, #1
 80027c2:	d103      	bne.n	80027cc <_printf_common+0xbc>
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027cc:	3501      	adds	r5, #1
 80027ce:	e7c2      	b.n	8002756 <_printf_common+0x46>
 80027d0:	18e1      	adds	r1, r4, r3
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	2030      	movs	r0, #48	; 0x30
 80027d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027da:	4422      	add	r2, r4
 80027dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027e4:	3302      	adds	r3, #2
 80027e6:	e7c4      	b.n	8002772 <_printf_common+0x62>
 80027e8:	2301      	movs	r3, #1
 80027ea:	4622      	mov	r2, r4
 80027ec:	4639      	mov	r1, r7
 80027ee:	4630      	mov	r0, r6
 80027f0:	47c0      	blx	r8
 80027f2:	3001      	adds	r0, #1
 80027f4:	d0e6      	beq.n	80027c4 <_printf_common+0xb4>
 80027f6:	f109 0901 	add.w	r9, r9, #1
 80027fa:	e7d7      	b.n	80027ac <_printf_common+0x9c>

080027fc <_printf_i>:
 80027fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002800:	4617      	mov	r7, r2
 8002802:	7e0a      	ldrb	r2, [r1, #24]
 8002804:	b085      	sub	sp, #20
 8002806:	2a6e      	cmp	r2, #110	; 0x6e
 8002808:	4698      	mov	r8, r3
 800280a:	4606      	mov	r6, r0
 800280c:	460c      	mov	r4, r1
 800280e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002810:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002814:	f000 80bc 	beq.w	8002990 <_printf_i+0x194>
 8002818:	d81a      	bhi.n	8002850 <_printf_i+0x54>
 800281a:	2a63      	cmp	r2, #99	; 0x63
 800281c:	d02e      	beq.n	800287c <_printf_i+0x80>
 800281e:	d80a      	bhi.n	8002836 <_printf_i+0x3a>
 8002820:	2a00      	cmp	r2, #0
 8002822:	f000 80c8 	beq.w	80029b6 <_printf_i+0x1ba>
 8002826:	2a58      	cmp	r2, #88	; 0x58
 8002828:	f000 808a 	beq.w	8002940 <_printf_i+0x144>
 800282c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002830:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002834:	e02a      	b.n	800288c <_printf_i+0x90>
 8002836:	2a64      	cmp	r2, #100	; 0x64
 8002838:	d001      	beq.n	800283e <_printf_i+0x42>
 800283a:	2a69      	cmp	r2, #105	; 0x69
 800283c:	d1f6      	bne.n	800282c <_printf_i+0x30>
 800283e:	6821      	ldr	r1, [r4, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002846:	d023      	beq.n	8002890 <_printf_i+0x94>
 8002848:	1d11      	adds	r1, r2, #4
 800284a:	6019      	str	r1, [r3, #0]
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	e027      	b.n	80028a0 <_printf_i+0xa4>
 8002850:	2a73      	cmp	r2, #115	; 0x73
 8002852:	f000 80b4 	beq.w	80029be <_printf_i+0x1c2>
 8002856:	d808      	bhi.n	800286a <_printf_i+0x6e>
 8002858:	2a6f      	cmp	r2, #111	; 0x6f
 800285a:	d02a      	beq.n	80028b2 <_printf_i+0xb6>
 800285c:	2a70      	cmp	r2, #112	; 0x70
 800285e:	d1e5      	bne.n	800282c <_printf_i+0x30>
 8002860:	680a      	ldr	r2, [r1, #0]
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	600a      	str	r2, [r1, #0]
 8002868:	e003      	b.n	8002872 <_printf_i+0x76>
 800286a:	2a75      	cmp	r2, #117	; 0x75
 800286c:	d021      	beq.n	80028b2 <_printf_i+0xb6>
 800286e:	2a78      	cmp	r2, #120	; 0x78
 8002870:	d1dc      	bne.n	800282c <_printf_i+0x30>
 8002872:	2278      	movs	r2, #120	; 0x78
 8002874:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002878:	496e      	ldr	r1, [pc, #440]	; (8002a34 <_printf_i+0x238>)
 800287a:	e064      	b.n	8002946 <_printf_i+0x14a>
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002882:	1d11      	adds	r1, r2, #4
 8002884:	6019      	str	r1, [r3, #0]
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800288c:	2301      	movs	r3, #1
 800288e:	e0a3      	b.n	80029d8 <_printf_i+0x1dc>
 8002890:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002894:	f102 0104 	add.w	r1, r2, #4
 8002898:	6019      	str	r1, [r3, #0]
 800289a:	d0d7      	beq.n	800284c <_printf_i+0x50>
 800289c:	f9b2 3000 	ldrsh.w	r3, [r2]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da03      	bge.n	80028ac <_printf_i+0xb0>
 80028a4:	222d      	movs	r2, #45	; 0x2d
 80028a6:	425b      	negs	r3, r3
 80028a8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80028ac:	4962      	ldr	r1, [pc, #392]	; (8002a38 <_printf_i+0x23c>)
 80028ae:	220a      	movs	r2, #10
 80028b0:	e017      	b.n	80028e2 <_printf_i+0xe6>
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028ba:	d003      	beq.n	80028c4 <_printf_i+0xc8>
 80028bc:	1d08      	adds	r0, r1, #4
 80028be:	6018      	str	r0, [r3, #0]
 80028c0:	680b      	ldr	r3, [r1, #0]
 80028c2:	e006      	b.n	80028d2 <_printf_i+0xd6>
 80028c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028c8:	f101 0004 	add.w	r0, r1, #4
 80028cc:	6018      	str	r0, [r3, #0]
 80028ce:	d0f7      	beq.n	80028c0 <_printf_i+0xc4>
 80028d0:	880b      	ldrh	r3, [r1, #0]
 80028d2:	4959      	ldr	r1, [pc, #356]	; (8002a38 <_printf_i+0x23c>)
 80028d4:	2a6f      	cmp	r2, #111	; 0x6f
 80028d6:	bf14      	ite	ne
 80028d8:	220a      	movne	r2, #10
 80028da:	2208      	moveq	r2, #8
 80028dc:	2000      	movs	r0, #0
 80028de:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80028e2:	6865      	ldr	r5, [r4, #4]
 80028e4:	60a5      	str	r5, [r4, #8]
 80028e6:	2d00      	cmp	r5, #0
 80028e8:	f2c0 809c 	blt.w	8002a24 <_printf_i+0x228>
 80028ec:	6820      	ldr	r0, [r4, #0]
 80028ee:	f020 0004 	bic.w	r0, r0, #4
 80028f2:	6020      	str	r0, [r4, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d13f      	bne.n	8002978 <_printf_i+0x17c>
 80028f8:	2d00      	cmp	r5, #0
 80028fa:	f040 8095 	bne.w	8002a28 <_printf_i+0x22c>
 80028fe:	4675      	mov	r5, lr
 8002900:	2a08      	cmp	r2, #8
 8002902:	d10b      	bne.n	800291c <_printf_i+0x120>
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	07da      	lsls	r2, r3, #31
 8002908:	d508      	bpl.n	800291c <_printf_i+0x120>
 800290a:	6923      	ldr	r3, [r4, #16]
 800290c:	6862      	ldr	r2, [r4, #4]
 800290e:	429a      	cmp	r2, r3
 8002910:	bfde      	ittt	le
 8002912:	2330      	movle	r3, #48	; 0x30
 8002914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002918:	f105 35ff 	addle.w	r5, r5, #4294967295
 800291c:	ebae 0305 	sub.w	r3, lr, r5
 8002920:	6123      	str	r3, [r4, #16]
 8002922:	f8cd 8000 	str.w	r8, [sp]
 8002926:	463b      	mov	r3, r7
 8002928:	aa03      	add	r2, sp, #12
 800292a:	4621      	mov	r1, r4
 800292c:	4630      	mov	r0, r6
 800292e:	f7ff feef 	bl	8002710 <_printf_common>
 8002932:	3001      	adds	r0, #1
 8002934:	d155      	bne.n	80029e2 <_printf_i+0x1e6>
 8002936:	f04f 30ff 	mov.w	r0, #4294967295
 800293a:	b005      	add	sp, #20
 800293c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002940:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002944:	493c      	ldr	r1, [pc, #240]	; (8002a38 <_printf_i+0x23c>)
 8002946:	6822      	ldr	r2, [r4, #0]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800294e:	f100 0504 	add.w	r5, r0, #4
 8002952:	601d      	str	r5, [r3, #0]
 8002954:	d001      	beq.n	800295a <_printf_i+0x15e>
 8002956:	6803      	ldr	r3, [r0, #0]
 8002958:	e002      	b.n	8002960 <_printf_i+0x164>
 800295a:	0655      	lsls	r5, r2, #25
 800295c:	d5fb      	bpl.n	8002956 <_printf_i+0x15a>
 800295e:	8803      	ldrh	r3, [r0, #0]
 8002960:	07d0      	lsls	r0, r2, #31
 8002962:	bf44      	itt	mi
 8002964:	f042 0220 	orrmi.w	r2, r2, #32
 8002968:	6022      	strmi	r2, [r4, #0]
 800296a:	b91b      	cbnz	r3, 8002974 <_printf_i+0x178>
 800296c:	6822      	ldr	r2, [r4, #0]
 800296e:	f022 0220 	bic.w	r2, r2, #32
 8002972:	6022      	str	r2, [r4, #0]
 8002974:	2210      	movs	r2, #16
 8002976:	e7b1      	b.n	80028dc <_printf_i+0xe0>
 8002978:	4675      	mov	r5, lr
 800297a:	fbb3 f0f2 	udiv	r0, r3, r2
 800297e:	fb02 3310 	mls	r3, r2, r0, r3
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002988:	4603      	mov	r3, r0
 800298a:	2800      	cmp	r0, #0
 800298c:	d1f5      	bne.n	800297a <_printf_i+0x17e>
 800298e:	e7b7      	b.n	8002900 <_printf_i+0x104>
 8002990:	6808      	ldr	r0, [r1, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	6949      	ldr	r1, [r1, #20]
 8002996:	f010 0f80 	tst.w	r0, #128	; 0x80
 800299a:	d004      	beq.n	80029a6 <_printf_i+0x1aa>
 800299c:	1d10      	adds	r0, r2, #4
 800299e:	6018      	str	r0, [r3, #0]
 80029a0:	6813      	ldr	r3, [r2, #0]
 80029a2:	6019      	str	r1, [r3, #0]
 80029a4:	e007      	b.n	80029b6 <_printf_i+0x1ba>
 80029a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029aa:	f102 0004 	add.w	r0, r2, #4
 80029ae:	6018      	str	r0, [r3, #0]
 80029b0:	6813      	ldr	r3, [r2, #0]
 80029b2:	d0f6      	beq.n	80029a2 <_printf_i+0x1a6>
 80029b4:	8019      	strh	r1, [r3, #0]
 80029b6:	2300      	movs	r3, #0
 80029b8:	6123      	str	r3, [r4, #16]
 80029ba:	4675      	mov	r5, lr
 80029bc:	e7b1      	b.n	8002922 <_printf_i+0x126>
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	1d11      	adds	r1, r2, #4
 80029c2:	6019      	str	r1, [r3, #0]
 80029c4:	6815      	ldr	r5, [r2, #0]
 80029c6:	6862      	ldr	r2, [r4, #4]
 80029c8:	2100      	movs	r1, #0
 80029ca:	4628      	mov	r0, r5
 80029cc:	f7fd fc00 	bl	80001d0 <memchr>
 80029d0:	b108      	cbz	r0, 80029d6 <_printf_i+0x1da>
 80029d2:	1b40      	subs	r0, r0, r5
 80029d4:	6060      	str	r0, [r4, #4]
 80029d6:	6863      	ldr	r3, [r4, #4]
 80029d8:	6123      	str	r3, [r4, #16]
 80029da:	2300      	movs	r3, #0
 80029dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e0:	e79f      	b.n	8002922 <_printf_i+0x126>
 80029e2:	6923      	ldr	r3, [r4, #16]
 80029e4:	462a      	mov	r2, r5
 80029e6:	4639      	mov	r1, r7
 80029e8:	4630      	mov	r0, r6
 80029ea:	47c0      	blx	r8
 80029ec:	3001      	adds	r0, #1
 80029ee:	d0a2      	beq.n	8002936 <_printf_i+0x13a>
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	079b      	lsls	r3, r3, #30
 80029f4:	d507      	bpl.n	8002a06 <_printf_i+0x20a>
 80029f6:	2500      	movs	r5, #0
 80029f8:	f104 0919 	add.w	r9, r4, #25
 80029fc:	68e3      	ldr	r3, [r4, #12]
 80029fe:	9a03      	ldr	r2, [sp, #12]
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	429d      	cmp	r5, r3
 8002a04:	db05      	blt.n	8002a12 <_printf_i+0x216>
 8002a06:	68e0      	ldr	r0, [r4, #12]
 8002a08:	9b03      	ldr	r3, [sp, #12]
 8002a0a:	4298      	cmp	r0, r3
 8002a0c:	bfb8      	it	lt
 8002a0e:	4618      	movlt	r0, r3
 8002a10:	e793      	b.n	800293a <_printf_i+0x13e>
 8002a12:	2301      	movs	r3, #1
 8002a14:	464a      	mov	r2, r9
 8002a16:	4639      	mov	r1, r7
 8002a18:	4630      	mov	r0, r6
 8002a1a:	47c0      	blx	r8
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	d08a      	beq.n	8002936 <_printf_i+0x13a>
 8002a20:	3501      	adds	r5, #1
 8002a22:	e7eb      	b.n	80029fc <_printf_i+0x200>
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1a7      	bne.n	8002978 <_printf_i+0x17c>
 8002a28:	780b      	ldrb	r3, [r1, #0]
 8002a2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a32:	e765      	b.n	8002900 <_printf_i+0x104>
 8002a34:	08002cf2 	.word	0x08002cf2
 8002a38:	08002ce1 	.word	0x08002ce1

08002a3c <__ascii_wctomb>:
 8002a3c:	b149      	cbz	r1, 8002a52 <__ascii_wctomb+0x16>
 8002a3e:	2aff      	cmp	r2, #255	; 0xff
 8002a40:	bf85      	ittet	hi
 8002a42:	238a      	movhi	r3, #138	; 0x8a
 8002a44:	6003      	strhi	r3, [r0, #0]
 8002a46:	700a      	strbls	r2, [r1, #0]
 8002a48:	f04f 30ff 	movhi.w	r0, #4294967295
 8002a4c:	bf98      	it	ls
 8002a4e:	2001      	movls	r0, #1
 8002a50:	4770      	bx	lr
 8002a52:	4608      	mov	r0, r1
 8002a54:	4770      	bx	lr

08002a56 <memcpy>:
 8002a56:	b510      	push	{r4, lr}
 8002a58:	1e43      	subs	r3, r0, #1
 8002a5a:	440a      	add	r2, r1
 8002a5c:	4291      	cmp	r1, r2
 8002a5e:	d100      	bne.n	8002a62 <memcpy+0xc>
 8002a60:	bd10      	pop	{r4, pc}
 8002a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a6a:	e7f7      	b.n	8002a5c <memcpy+0x6>

08002a6c <memmove>:
 8002a6c:	4288      	cmp	r0, r1
 8002a6e:	b510      	push	{r4, lr}
 8002a70:	eb01 0302 	add.w	r3, r1, r2
 8002a74:	d803      	bhi.n	8002a7e <memmove+0x12>
 8002a76:	1e42      	subs	r2, r0, #1
 8002a78:	4299      	cmp	r1, r3
 8002a7a:	d10c      	bne.n	8002a96 <memmove+0x2a>
 8002a7c:	bd10      	pop	{r4, pc}
 8002a7e:	4298      	cmp	r0, r3
 8002a80:	d2f9      	bcs.n	8002a76 <memmove+0xa>
 8002a82:	1881      	adds	r1, r0, r2
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	42d3      	cmn	r3, r2
 8002a88:	d100      	bne.n	8002a8c <memmove+0x20>
 8002a8a:	bd10      	pop	{r4, pc}
 8002a8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a94:	e7f7      	b.n	8002a86 <memmove+0x1a>
 8002a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a9a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a9e:	e7eb      	b.n	8002a78 <memmove+0xc>

08002aa0 <_free_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	4605      	mov	r5, r0
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	d045      	beq.n	8002b34 <_free_r+0x94>
 8002aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aac:	1f0c      	subs	r4, r1, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bfb8      	it	lt
 8002ab2:	18e4      	addlt	r4, r4, r3
 8002ab4:	f000 f8d6 	bl	8002c64 <__malloc_lock>
 8002ab8:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <_free_r+0x98>)
 8002aba:	6813      	ldr	r3, [r2, #0]
 8002abc:	4610      	mov	r0, r2
 8002abe:	b933      	cbnz	r3, 8002ace <_free_r+0x2e>
 8002ac0:	6063      	str	r3, [r4, #4]
 8002ac2:	6014      	str	r4, [r2, #0]
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aca:	f000 b8cc 	b.w	8002c66 <__malloc_unlock>
 8002ace:	42a3      	cmp	r3, r4
 8002ad0:	d90c      	bls.n	8002aec <_free_r+0x4c>
 8002ad2:	6821      	ldr	r1, [r4, #0]
 8002ad4:	1862      	adds	r2, r4, r1
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	bf04      	itt	eq
 8002ada:	681a      	ldreq	r2, [r3, #0]
 8002adc:	685b      	ldreq	r3, [r3, #4]
 8002ade:	6063      	str	r3, [r4, #4]
 8002ae0:	bf04      	itt	eq
 8002ae2:	1852      	addeq	r2, r2, r1
 8002ae4:	6022      	streq	r2, [r4, #0]
 8002ae6:	6004      	str	r4, [r0, #0]
 8002ae8:	e7ec      	b.n	8002ac4 <_free_r+0x24>
 8002aea:	4613      	mov	r3, r2
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	b10a      	cbz	r2, 8002af4 <_free_r+0x54>
 8002af0:	42a2      	cmp	r2, r4
 8002af2:	d9fa      	bls.n	8002aea <_free_r+0x4a>
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	1858      	adds	r0, r3, r1
 8002af8:	42a0      	cmp	r0, r4
 8002afa:	d10b      	bne.n	8002b14 <_free_r+0x74>
 8002afc:	6820      	ldr	r0, [r4, #0]
 8002afe:	4401      	add	r1, r0
 8002b00:	1858      	adds	r0, r3, r1
 8002b02:	4282      	cmp	r2, r0
 8002b04:	6019      	str	r1, [r3, #0]
 8002b06:	d1dd      	bne.n	8002ac4 <_free_r+0x24>
 8002b08:	6810      	ldr	r0, [r2, #0]
 8002b0a:	6852      	ldr	r2, [r2, #4]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	4401      	add	r1, r0
 8002b10:	6019      	str	r1, [r3, #0]
 8002b12:	e7d7      	b.n	8002ac4 <_free_r+0x24>
 8002b14:	d902      	bls.n	8002b1c <_free_r+0x7c>
 8002b16:	230c      	movs	r3, #12
 8002b18:	602b      	str	r3, [r5, #0]
 8002b1a:	e7d3      	b.n	8002ac4 <_free_r+0x24>
 8002b1c:	6820      	ldr	r0, [r4, #0]
 8002b1e:	1821      	adds	r1, r4, r0
 8002b20:	428a      	cmp	r2, r1
 8002b22:	bf04      	itt	eq
 8002b24:	6811      	ldreq	r1, [r2, #0]
 8002b26:	6852      	ldreq	r2, [r2, #4]
 8002b28:	6062      	str	r2, [r4, #4]
 8002b2a:	bf04      	itt	eq
 8002b2c:	1809      	addeq	r1, r1, r0
 8002b2e:	6021      	streq	r1, [r4, #0]
 8002b30:	605c      	str	r4, [r3, #4]
 8002b32:	e7c7      	b.n	8002ac4 <_free_r+0x24>
 8002b34:	bd38      	pop	{r3, r4, r5, pc}
 8002b36:	bf00      	nop
 8002b38:	20000214 	.word	0x20000214

08002b3c <_malloc_r>:
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	1ccd      	adds	r5, r1, #3
 8002b40:	f025 0503 	bic.w	r5, r5, #3
 8002b44:	3508      	adds	r5, #8
 8002b46:	2d0c      	cmp	r5, #12
 8002b48:	bf38      	it	cc
 8002b4a:	250c      	movcc	r5, #12
 8002b4c:	2d00      	cmp	r5, #0
 8002b4e:	4606      	mov	r6, r0
 8002b50:	db01      	blt.n	8002b56 <_malloc_r+0x1a>
 8002b52:	42a9      	cmp	r1, r5
 8002b54:	d903      	bls.n	8002b5e <_malloc_r+0x22>
 8002b56:	230c      	movs	r3, #12
 8002b58:	6033      	str	r3, [r6, #0]
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}
 8002b5e:	f000 f881 	bl	8002c64 <__malloc_lock>
 8002b62:	4a23      	ldr	r2, [pc, #140]	; (8002bf0 <_malloc_r+0xb4>)
 8002b64:	6814      	ldr	r4, [r2, #0]
 8002b66:	4621      	mov	r1, r4
 8002b68:	b991      	cbnz	r1, 8002b90 <_malloc_r+0x54>
 8002b6a:	4c22      	ldr	r4, [pc, #136]	; (8002bf4 <_malloc_r+0xb8>)
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	b91b      	cbnz	r3, 8002b78 <_malloc_r+0x3c>
 8002b70:	4630      	mov	r0, r6
 8002b72:	f000 f867 	bl	8002c44 <_sbrk_r>
 8002b76:	6020      	str	r0, [r4, #0]
 8002b78:	4629      	mov	r1, r5
 8002b7a:	4630      	mov	r0, r6
 8002b7c:	f000 f862 	bl	8002c44 <_sbrk_r>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	d126      	bne.n	8002bd2 <_malloc_r+0x96>
 8002b84:	230c      	movs	r3, #12
 8002b86:	6033      	str	r3, [r6, #0]
 8002b88:	4630      	mov	r0, r6
 8002b8a:	f000 f86c 	bl	8002c66 <__malloc_unlock>
 8002b8e:	e7e4      	b.n	8002b5a <_malloc_r+0x1e>
 8002b90:	680b      	ldr	r3, [r1, #0]
 8002b92:	1b5b      	subs	r3, r3, r5
 8002b94:	d41a      	bmi.n	8002bcc <_malloc_r+0x90>
 8002b96:	2b0b      	cmp	r3, #11
 8002b98:	d90f      	bls.n	8002bba <_malloc_r+0x7e>
 8002b9a:	600b      	str	r3, [r1, #0]
 8002b9c:	50cd      	str	r5, [r1, r3]
 8002b9e:	18cc      	adds	r4, r1, r3
 8002ba0:	4630      	mov	r0, r6
 8002ba2:	f000 f860 	bl	8002c66 <__malloc_unlock>
 8002ba6:	f104 000b 	add.w	r0, r4, #11
 8002baa:	1d23      	adds	r3, r4, #4
 8002bac:	f020 0007 	bic.w	r0, r0, #7
 8002bb0:	1ac3      	subs	r3, r0, r3
 8002bb2:	d01b      	beq.n	8002bec <_malloc_r+0xb0>
 8002bb4:	425a      	negs	r2, r3
 8002bb6:	50e2      	str	r2, [r4, r3]
 8002bb8:	bd70      	pop	{r4, r5, r6, pc}
 8002bba:	428c      	cmp	r4, r1
 8002bbc:	bf0d      	iteet	eq
 8002bbe:	6863      	ldreq	r3, [r4, #4]
 8002bc0:	684b      	ldrne	r3, [r1, #4]
 8002bc2:	6063      	strne	r3, [r4, #4]
 8002bc4:	6013      	streq	r3, [r2, #0]
 8002bc6:	bf18      	it	ne
 8002bc8:	460c      	movne	r4, r1
 8002bca:	e7e9      	b.n	8002ba0 <_malloc_r+0x64>
 8002bcc:	460c      	mov	r4, r1
 8002bce:	6849      	ldr	r1, [r1, #4]
 8002bd0:	e7ca      	b.n	8002b68 <_malloc_r+0x2c>
 8002bd2:	1cc4      	adds	r4, r0, #3
 8002bd4:	f024 0403 	bic.w	r4, r4, #3
 8002bd8:	42a0      	cmp	r0, r4
 8002bda:	d005      	beq.n	8002be8 <_malloc_r+0xac>
 8002bdc:	1a21      	subs	r1, r4, r0
 8002bde:	4630      	mov	r0, r6
 8002be0:	f000 f830 	bl	8002c44 <_sbrk_r>
 8002be4:	3001      	adds	r0, #1
 8002be6:	d0cd      	beq.n	8002b84 <_malloc_r+0x48>
 8002be8:	6025      	str	r5, [r4, #0]
 8002bea:	e7d9      	b.n	8002ba0 <_malloc_r+0x64>
 8002bec:	bd70      	pop	{r4, r5, r6, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000214 	.word	0x20000214
 8002bf4:	20000218 	.word	0x20000218

08002bf8 <_realloc_r>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	4607      	mov	r7, r0
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	460e      	mov	r6, r1
 8002c00:	b921      	cbnz	r1, 8002c0c <_realloc_r+0x14>
 8002c02:	4611      	mov	r1, r2
 8002c04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c08:	f7ff bf98 	b.w	8002b3c <_malloc_r>
 8002c0c:	b922      	cbnz	r2, 8002c18 <_realloc_r+0x20>
 8002c0e:	f7ff ff47 	bl	8002aa0 <_free_r>
 8002c12:	4625      	mov	r5, r4
 8002c14:	4628      	mov	r0, r5
 8002c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c18:	f000 f826 	bl	8002c68 <_malloc_usable_size_r>
 8002c1c:	4284      	cmp	r4, r0
 8002c1e:	d90f      	bls.n	8002c40 <_realloc_r+0x48>
 8002c20:	4621      	mov	r1, r4
 8002c22:	4638      	mov	r0, r7
 8002c24:	f7ff ff8a 	bl	8002b3c <_malloc_r>
 8002c28:	4605      	mov	r5, r0
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d0f2      	beq.n	8002c14 <_realloc_r+0x1c>
 8002c2e:	4631      	mov	r1, r6
 8002c30:	4622      	mov	r2, r4
 8002c32:	f7ff ff10 	bl	8002a56 <memcpy>
 8002c36:	4631      	mov	r1, r6
 8002c38:	4638      	mov	r0, r7
 8002c3a:	f7ff ff31 	bl	8002aa0 <_free_r>
 8002c3e:	e7e9      	b.n	8002c14 <_realloc_r+0x1c>
 8002c40:	4635      	mov	r5, r6
 8002c42:	e7e7      	b.n	8002c14 <_realloc_r+0x1c>

08002c44 <_sbrk_r>:
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	4c06      	ldr	r4, [pc, #24]	; (8002c60 <_sbrk_r+0x1c>)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	4605      	mov	r5, r0
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	6023      	str	r3, [r4, #0]
 8002c50:	f000 f814 	bl	8002c7c <_sbrk>
 8002c54:	1c43      	adds	r3, r0, #1
 8002c56:	d102      	bne.n	8002c5e <_sbrk_r+0x1a>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	b103      	cbz	r3, 8002c5e <_sbrk_r+0x1a>
 8002c5c:	602b      	str	r3, [r5, #0]
 8002c5e:	bd38      	pop	{r3, r4, r5, pc}
 8002c60:	200003c8 	.word	0x200003c8

08002c64 <__malloc_lock>:
 8002c64:	4770      	bx	lr

08002c66 <__malloc_unlock>:
 8002c66:	4770      	bx	lr

08002c68 <_malloc_usable_size_r>:
 8002c68:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	f1a0 0004 	sub.w	r0, r0, #4
 8002c72:	bfbc      	itt	lt
 8002c74:	580b      	ldrlt	r3, [r1, r0]
 8002c76:	18c0      	addlt	r0, r0, r3
 8002c78:	4770      	bx	lr
	...

08002c7c <_sbrk>:
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <_sbrk+0x14>)
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	4602      	mov	r2, r0
 8002c82:	b909      	cbnz	r1, 8002c88 <_sbrk+0xc>
 8002c84:	4903      	ldr	r1, [pc, #12]	; (8002c94 <_sbrk+0x18>)
 8002c86:	6019      	str	r1, [r3, #0]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	4402      	add	r2, r0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	4770      	bx	lr
 8002c90:	2000021c 	.word	0x2000021c
 8002c94:	200003cc 	.word	0x200003cc

08002c98 <_init>:
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9a:	bf00      	nop
 8002c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9e:	bc08      	pop	{r3}
 8002ca0:	469e      	mov	lr, r3
 8002ca2:	4770      	bx	lr

08002ca4 <_fini>:
 8002ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca6:	bf00      	nop
 8002ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002caa:	bc08      	pop	{r3}
 8002cac:	469e      	mov	lr, r3
 8002cae:	4770      	bx	lr
